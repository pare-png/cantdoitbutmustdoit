"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InstallerOptions", {
  enumerable: true,
  get: function () {
    return _installerBase.InstallerOptions;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _installerBase = _interopRequireWildcard(require("@electron-forge/installer-base"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _sudoPrompt = _interopRequireDefault(require("sudo-prompt"));

var _child_process = require("child_process");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class InstallerDarwin extends _installerBase.default {
  async moveApp(appPath, targetApplicationPath, spinner, copyInstead = false) {
    let writeAccess = true;

    try {
      await _fsExtra.default.access('/Applications', _fsExtra.default.constants.W_OK);
    } catch (err) {
      writeAccess = false;
    }

    if (await _fsExtra.default.pathExists(targetApplicationPath)) {
      spinner.fail();
      throw new Error(`The application "${_path.default.basename(targetApplicationPath)}" appears to already exist in /Applications.`);
    }

    const moveCommand = `${copyInstead ? 'cp -r' : 'mv'} "${appPath}" "${targetApplicationPath}"`;

    if (writeAccess) {
      await (0, _util.promisify)(_child_process.exec)(moveCommand);
    } else {
      await (0, _util.promisify)(_sudoPrompt.default.exec)(moveCommand, {
        name: 'Electron Forge'
      });
    }
  }

}

exports.default = InstallerDarwin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJEYXJ3aW4udHMiXSwibmFtZXMiOlsiSW5zdGFsbGVyRGFyd2luIiwiSW5zdGFsbGVyQmFzZSIsIm1vdmVBcHAiLCJhcHBQYXRoIiwidGFyZ2V0QXBwbGljYXRpb25QYXRoIiwic3Bpbm5lciIsImNvcHlJbnN0ZWFkIiwid3JpdGVBY2Nlc3MiLCJmcyIsImFjY2VzcyIsImNvbnN0YW50cyIsIldfT0siLCJlcnIiLCJwYXRoRXhpc3RzIiwiZmFpbCIsIkVycm9yIiwicGF0aCIsImJhc2VuYW1lIiwibW92ZUNvbW1hbmQiLCJleGVjIiwic3VkbyIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFJZSxNQUFlQSxlQUFmLFNBQXVDQyxzQkFBdkMsQ0FBcUQ7QUFDbEUsUUFBTUMsT0FBTixDQUNFQyxPQURGLEVBRUVDLHFCQUZGLEVBR0VDLE9BSEYsRUFJRUMsV0FBVyxHQUFHLEtBSmhCLEVBS0U7QUFDQSxRQUFJQyxXQUFXLEdBQUcsSUFBbEI7O0FBQ0EsUUFBSTtBQUNGLFlBQU1DLGlCQUFHQyxNQUFILENBQVUsZUFBVixFQUEyQkQsaUJBQUdFLFNBQUgsQ0FBYUMsSUFBeEMsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWkwsTUFBQUEsV0FBVyxHQUFHLEtBQWQ7QUFDRDs7QUFFRCxRQUFJLE1BQU1DLGlCQUFHSyxVQUFILENBQWNULHFCQUFkLENBQVYsRUFBZ0Q7QUFDOUNDLE1BQUFBLE9BQU8sQ0FBQ1MsSUFBUjtBQUNBLFlBQU0sSUFBSUMsS0FBSixDQUFXLG9CQUFtQkMsY0FBS0MsUUFBTCxDQUFjYixxQkFBZCxDQUFxQyw4Q0FBbkUsQ0FBTjtBQUNEOztBQUVELFVBQU1jLFdBQVcsR0FBSSxHQUFFWixXQUFXLEdBQUcsT0FBSCxHQUFhLElBQUssS0FBSUgsT0FBUSxNQUFLQyxxQkFBc0IsR0FBM0Y7O0FBQ0EsUUFBSUcsV0FBSixFQUFpQjtBQUNmLFlBQU0scUJBQVVZLG1CQUFWLEVBQWdCRCxXQUFoQixDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTSxxQkFBVUUsb0JBQUtELElBQWYsRUFBcUJELFdBQXJCLEVBQWtDO0FBQ3RDRyxRQUFBQSxJQUFJLEVBQUU7QUFEZ0MsT0FBbEMsQ0FBTjtBQUdEO0FBQ0Y7O0FBM0JpRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yYUltcGwgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCBJbnN0YWxsZXJCYXNlLCB7IEluc3RhbGxlck9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvaW5zdGFsbGVyLWJhc2UnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCBzdWRvIGZyb20gJ3N1ZG8tcHJvbXB0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuZXhwb3J0IHsgSW5zdGFsbGVyT3B0aW9ucyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBJbnN0YWxsZXJEYXJ3aW4gZXh0ZW5kcyBJbnN0YWxsZXJCYXNlIHtcbiAgYXN5bmMgbW92ZUFwcChcbiAgICBhcHBQYXRoOiBzdHJpbmcsXG4gICAgdGFyZ2V0QXBwbGljYXRpb25QYXRoOiBzdHJpbmcsXG4gICAgc3Bpbm5lcjogT3JhSW1wbCxcbiAgICBjb3B5SW5zdGVhZCA9IGZhbHNlLFxuICApIHtcbiAgICBsZXQgd3JpdGVBY2Nlc3MgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcy5hY2Nlc3MoJy9BcHBsaWNhdGlvbnMnLCBmcy5jb25zdGFudHMuV19PSyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB3cml0ZUFjY2VzcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhd2FpdCBmcy5wYXRoRXhpc3RzKHRhcmdldEFwcGxpY2F0aW9uUGF0aCkpIHtcbiAgICAgIHNwaW5uZXIuZmFpbCgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgYXBwbGljYXRpb24gXCIke3BhdGguYmFzZW5hbWUodGFyZ2V0QXBwbGljYXRpb25QYXRoKX1cIiBhcHBlYXJzIHRvIGFscmVhZHkgZXhpc3QgaW4gL0FwcGxpY2F0aW9ucy5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBtb3ZlQ29tbWFuZCA9IGAke2NvcHlJbnN0ZWFkID8gJ2NwIC1yJyA6ICdtdid9IFwiJHthcHBQYXRofVwiIFwiJHt0YXJnZXRBcHBsaWNhdGlvblBhdGh9XCJgO1xuICAgIGlmICh3cml0ZUFjY2Vzcykge1xuICAgICAgYXdhaXQgcHJvbWlzaWZ5KGV4ZWMpKG1vdmVDb21tYW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgcHJvbWlzaWZ5KHN1ZG8uZXhlYykobW92ZUNvbW1hbmQsIHtcbiAgICAgICAgbmFtZTogJ0VsZWN0cm9uIEZvcmdlJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19