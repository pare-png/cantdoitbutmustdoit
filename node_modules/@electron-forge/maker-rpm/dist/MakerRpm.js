"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpmArch = rpmArch;
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function rpmArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';

    case 'x64':
      return 'x86_64';

    case 'armv7l':
      return 'armv7hl';

    case 'arm':
      return 'armv6hl';

    default:
      return nodeArch;
  }
}

class MakerRpm extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'rpm');

    _defineProperty(this, "defaultPlatforms", ['linux']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-installer-redhat') && this.externalBinariesExist(['rpmbuild']);
  }

  async make({
    dir,
    makeDir,
    targetArch
  }) {
    // eslint-disable-next-line global-require, import/no-unresolved
    const installer = require('electron-installer-redhat');

    const outDir = _path.default.resolve(makeDir, 'rpm', targetArch);

    await this.ensureDirectory(outDir);
    const {
      packagePaths
    } = await installer(_objectSpread({}, this.config, {
      arch: rpmArch(targetArch),
      src: dir,
      dest: outDir,
      rename: undefined
    }));
    return packagePaths;
  }

}

exports.default = MakerRpm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclJwbS50cyJdLCJuYW1lcyI6WyJycG1BcmNoIiwibm9kZUFyY2giLCJNYWtlclJwbSIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsImV4dGVybmFsQmluYXJpZXNFeGlzdCIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsImluc3RhbGxlciIsInJlcXVpcmUiLCJvdXREaXIiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsInBhY2thZ2VQYXRocyIsImNvbmZpZyIsImFyY2giLCJzcmMiLCJkZXN0IiwicmVuYW1lIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBRUE7Ozs7Ozs7Ozs7QUFJTyxTQUFTQSxPQUFULENBQWlCQyxRQUFqQixFQUFzQztBQUMzQyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQWEsYUFBTyxNQUFQOztBQUNiLFNBQUssS0FBTDtBQUFZLGFBQU8sUUFBUDs7QUFDWixTQUFLLFFBQUw7QUFBZSxhQUFPLFNBQVA7O0FBQ2YsU0FBSyxLQUFMO0FBQVksYUFBTyxTQUFQOztBQUNaO0FBQVMsYUFBT0EsUUFBUDtBQUxYO0FBT0Q7O0FBRWMsTUFBTUMsUUFBTixTQUF1QkMsa0JBQXZCLENBQWlEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDdkQsS0FEdUQ7O0FBQUEsOENBRzFCLENBQUMsT0FBRCxDQUgwQjtBQUFBOztBQUs5REMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLDJCQUFqQixLQUFpRCxLQUFLQyxxQkFBTCxDQUEyQixDQUFDLFVBQUQsQ0FBM0IsQ0FBeEQ7QUFDRDs7QUFFRCxRQUFNQyxJQUFOLENBQVc7QUFDVEMsSUFBQUEsR0FEUztBQUVUQyxJQUFBQSxPQUZTO0FBR1RDLElBQUFBO0FBSFMsR0FBWCxFQUlpQjtBQUNmO0FBQ0EsVUFBTUMsU0FBUyxHQUFHQyxPQUFPLENBQUMsMkJBQUQsQ0FBekI7O0FBRUEsVUFBTUMsTUFBTSxHQUFHQyxjQUFLQyxPQUFMLENBQWFOLE9BQWIsRUFBc0IsS0FBdEIsRUFBNkJDLFVBQTdCLENBQWY7O0FBRUEsVUFBTSxLQUFLTSxlQUFMLENBQXFCSCxNQUFyQixDQUFOO0FBQ0EsVUFBTTtBQUFFSSxNQUFBQTtBQUFGLFFBQW1CLE1BQU1OLFNBQVMsbUJBQ25DLEtBQUtPLE1BRDhCO0FBRXRDQyxNQUFBQSxJQUFJLEVBQUVuQixPQUFPLENBQUNVLFVBQUQsQ0FGeUI7QUFHdENVLE1BQUFBLEdBQUcsRUFBRVosR0FIaUM7QUFJdENhLE1BQUFBLElBQUksRUFBRVIsTUFKZ0M7QUFLdENTLE1BQUFBLE1BQU0sRUFBRUM7QUFMOEIsT0FBeEM7QUFPQSxXQUFPTixZQUFQO0FBQ0Q7O0FBNUI2RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWtlckJhc2UsIHsgTWFrZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL21ha2VyLWJhc2UnO1xuaW1wb3J0IHsgRm9yZ2VBcmNoLCBGb3JnZVBsYXRmb3JtIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgTWFrZXJScG1Db25maWcgfSBmcm9tICcuL0NvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBycG1BcmNoKG5vZGVBcmNoOiBGb3JnZUFyY2gpIHtcbiAgc3dpdGNoIChub2RlQXJjaCkge1xuICAgIGNhc2UgJ2lhMzInOiByZXR1cm4gJ2kzODYnO1xuICAgIGNhc2UgJ3g2NCc6IHJldHVybiAneDg2XzY0JztcbiAgICBjYXNlICdhcm12N2wnOiByZXR1cm4gJ2FybXY3aGwnO1xuICAgIGNhc2UgJ2FybSc6IHJldHVybiAnYXJtdjZobCc7XG4gICAgZGVmYXVsdDogcmV0dXJuIG5vZGVBcmNoO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VyUnBtIGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyUnBtQ29uZmlnPiB7XG4gIG5hbWUgPSAncnBtJztcblxuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ2xpbnV4J107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luc3RhbGxlZCgnZWxlY3Ryb24taW5zdGFsbGVyLXJlZGhhdCcpICYmIHRoaXMuZXh0ZXJuYWxCaW5hcmllc0V4aXN0KFsncnBtYnVpbGQnXSk7XG4gIH1cblxuICBhc3luYyBtYWtlKHtcbiAgICBkaXIsXG4gICAgbWFrZURpcixcbiAgICB0YXJnZXRBcmNoLFxuICB9OiBNYWtlck9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmUsIGltcG9ydC9uby11bnJlc29sdmVkXG4gICAgY29uc3QgaW5zdGFsbGVyID0gcmVxdWlyZSgnZWxlY3Ryb24taW5zdGFsbGVyLXJlZGhhdCcpO1xuXG4gICAgY29uc3Qgb3V0RGlyID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsICdycG0nLCB0YXJnZXRBcmNoKTtcblxuICAgIGF3YWl0IHRoaXMuZW5zdXJlRGlyZWN0b3J5KG91dERpcik7XG4gICAgY29uc3QgeyBwYWNrYWdlUGF0aHMgfSA9IGF3YWl0IGluc3RhbGxlcih7XG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFyY2g6IHJwbUFyY2godGFyZ2V0QXJjaCksXG4gICAgICBzcmM6IGRpcixcbiAgICAgIGRlc3Q6IG91dERpcixcbiAgICAgIHJlbmFtZTogdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIHJldHVybiBwYWNrYWdlUGF0aHM7XG4gIH1cbn1cbiJdfQ==