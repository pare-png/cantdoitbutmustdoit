"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _electronWinstaller = require("electron-winstaller");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerSquirrel extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'squirrel');

    _defineProperty(this, "defaultPlatforms", ['win32']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
  }

  async make({
    dir,
    makeDir,
    targetArch,
    packageJSON,
    appName
  }) {
    const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);

    await this.ensureDirectory(outPath);

    const winstallerConfig = _objectSpread({
      name: packageJSON.name,
      title: appName,
      noMsi: true,
      exe: `${appName}.exe`,
      setupExe: `${appName}-${packageJSON.version} Setup.exe`
    }, this.config, {
      appDirectory: dir,
      outputDirectory: outPath
    });

    await (0, _electronWinstaller.createWindowsInstaller)(winstallerConfig);
    const artifacts = [_path.default.resolve(outPath, 'RELEASES'), _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`), _path.default.resolve(outPath, `${winstallerConfig.name}-${packageJSON.version}-full.nupkg`)];

    const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${packageJSON.version}-delta.nupkg`);

    if (winstallerConfig.remoteReleases || (await _fsExtra.default.pathExists(deltaPath))) {
      artifacts.push(deltaPath);
    }

    const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);

    if (!winstallerConfig.noMsi && (await _fsExtra.default.pathExists(msiPath))) {
      artifacts.push(msiPath);
    }

    return artifacts;
  }

}

exports.default = MakerSquirrel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sIm5hbWVzIjpbIk1ha2VyU3F1aXJyZWwiLCJNYWtlckJhc2UiLCJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiaXNJbnN0YWxsZWQiLCJwcm9jZXNzIiwiZW52IiwiRElTQUJMRV9TUVVJUlJFTF9URVNUIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJ0YXJnZXRBcmNoIiwicGFja2FnZUpTT04iLCJhcHBOYW1lIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZW5zdXJlRGlyZWN0b3J5Iiwid2luc3RhbGxlckNvbmZpZyIsIm5hbWUiLCJ0aXRsZSIsIm5vTXNpIiwiZXhlIiwic2V0dXBFeGUiLCJ2ZXJzaW9uIiwiY29uZmlnIiwiYXBwRGlyZWN0b3J5Iiwib3V0cHV0RGlyZWN0b3J5IiwiYXJ0aWZhY3RzIiwiZGVsdGFQYXRoIiwicmVtb3RlUmVsZWFzZXMiLCJmcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUllLE1BQU1BLGFBQU4sU0FBNEJDLGtCQUE1QixDQUEyRDtBQUFBO0FBQUE7O0FBQUEsa0NBQ2pFLFVBRGlFOztBQUFBLDhDQUdwQyxDQUFDLE9BQUQsQ0FIb0M7QUFBQTs7QUFLeEVDLEVBQUFBLDRCQUE0QixHQUFHO0FBQzdCLFdBQU8sS0FBS0MsV0FBTCxDQUFpQixxQkFBakIsS0FBMkMsQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLHFCQUEvRDtBQUNEOztBQUVELFFBQU1DLElBQU4sQ0FBVztBQUNUQyxJQUFBQSxHQURTO0FBRVRDLElBQUFBLE9BRlM7QUFHVEMsSUFBQUEsVUFIUztBQUlUQyxJQUFBQSxXQUpTO0FBS1RDLElBQUFBO0FBTFMsR0FBWCxFQU1pQjtBQUNmLFVBQU1DLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhTixPQUFiLEVBQXVCLG9CQUFtQkMsVUFBVyxFQUFyRCxDQUFoQjs7QUFDQSxVQUFNLEtBQUtNLGVBQUwsQ0FBcUJILE9BQXJCLENBQU47O0FBRUEsVUFBTUksZ0JBQTJDO0FBQy9DQyxNQUFBQSxJQUFJLEVBQUVQLFdBQVcsQ0FBQ08sSUFENkI7QUFFL0NDLE1BQUFBLEtBQUssRUFBRVAsT0FGd0M7QUFHL0NRLE1BQUFBLEtBQUssRUFBRSxJQUh3QztBQUkvQ0MsTUFBQUEsR0FBRyxFQUFHLEdBQUVULE9BQVEsTUFKK0I7QUFLL0NVLE1BQUFBLFFBQVEsRUFBRyxHQUFFVixPQUFRLElBQUdELFdBQVcsQ0FBQ1ksT0FBUTtBQUxHLE9BTTVDLEtBQUtDLE1BTnVDO0FBTy9DQyxNQUFBQSxZQUFZLEVBQUVqQixHQVBpQztBQVEvQ2tCLE1BQUFBLGVBQWUsRUFBRWI7QUFSOEIsTUFBakQ7O0FBV0EsVUFBTSxnREFBdUJJLGdCQUF2QixDQUFOO0FBRUEsVUFBTVUsU0FBUyxHQUFHLENBQ2hCYixjQUFLQyxPQUFMLENBQWFGLE9BQWIsRUFBc0IsVUFBdEIsQ0FEZ0IsRUFFaEJDLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUFzQkksZ0JBQWdCLENBQUNLLFFBQWpCLElBQThCLEdBQUVWLE9BQVEsV0FBOUQsQ0FGZ0IsRUFHaEJFLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUF1QixHQUFFSSxnQkFBZ0IsQ0FBQ0MsSUFBSyxJQUFHUCxXQUFXLENBQUNZLE9BQVEsYUFBdEUsQ0FIZ0IsQ0FBbEI7O0FBS0EsVUFBTUssU0FBUyxHQUFHZCxjQUFLQyxPQUFMLENBQWFGLE9BQWIsRUFBdUIsR0FBRUksZ0JBQWdCLENBQUNDLElBQUssSUFBR1AsV0FBVyxDQUFDWSxPQUFRLGNBQXRFLENBQWxCOztBQUNBLFFBQUlOLGdCQUFnQixDQUFDWSxjQUFqQixLQUFtQyxNQUFNQyxpQkFBR0MsVUFBSCxDQUFjSCxTQUFkLENBQXpDLENBQUosRUFBdUU7QUFDckVELE1BQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlSixTQUFmO0FBQ0Q7O0FBQ0QsVUFBTUssT0FBTyxHQUFHbkIsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXNCSSxnQkFBZ0IsQ0FBQ2lCLFFBQWpCLElBQThCLEdBQUV0QixPQUFRLFdBQTlELENBQWhCOztBQUNBLFFBQUksQ0FBQ0ssZ0JBQWdCLENBQUNHLEtBQWxCLEtBQTJCLE1BQU1VLGlCQUFHQyxVQUFILENBQWNFLE9BQWQsQ0FBakMsQ0FBSixFQUE2RDtBQUMzRE4sTUFBQUEsU0FBUyxDQUFDSyxJQUFWLENBQWVDLE9BQWY7QUFDRDs7QUFDRCxXQUFPTixTQUFQO0FBQ0Q7O0FBOUN1RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWtlckJhc2UsIHsgTWFrZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL21ha2VyLWJhc2UnO1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5pbXBvcnQgeyBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyLCBPcHRpb25zIGFzIEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMgfSBmcm9tICdlbGVjdHJvbi13aW5zdGFsbGVyJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgTWFrZXJTcXVpcnJlbENvbmZpZyB9IGZyb20gJy4vQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJTcXVpcnJlbCBleHRlbmRzIE1ha2VyQmFzZTxNYWtlclNxdWlycmVsQ29uZmlnPiB7XG4gIG5hbWUgPSAnc3F1aXJyZWwnO1xuXG4gIGRlZmF1bHRQbGF0Zm9ybXM6IEZvcmdlUGxhdGZvcm1bXSA9IFsnd2luMzInXTtcblxuICBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLmlzSW5zdGFsbGVkKCdlbGVjdHJvbi13aW5zdGFsbGVyJykgJiYgIXByb2Nlc3MuZW52LkRJU0FCTEVfU1FVSVJSRUxfVEVTVDtcbiAgfVxuXG4gIGFzeW5jIG1ha2Uoe1xuICAgIGRpcixcbiAgICBtYWtlRGlyLFxuICAgIHRhcmdldEFyY2gsXG4gICAgcGFja2FnZUpTT04sXG4gICAgYXBwTmFtZSxcbiAgfTogTWFrZXJPcHRpb25zKSB7XG4gICAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCBgc3F1aXJyZWwud2luZG93cy8ke3RhcmdldEFyY2h9YCk7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVEaXJlY3Rvcnkob3V0UGF0aCk7XG5cbiAgICBjb25zdCB3aW5zdGFsbGVyQ29uZmlnOiBFbGVjdHJvbldpbnN0YWxsZXJPcHRpb25zID0ge1xuICAgICAgbmFtZTogcGFja2FnZUpTT04ubmFtZSxcbiAgICAgIHRpdGxlOiBhcHBOYW1lLFxuICAgICAgbm9Nc2k6IHRydWUsXG4gICAgICBleGU6IGAke2FwcE5hbWV9LmV4ZWAsXG4gICAgICBzZXR1cEV4ZTogYCR7YXBwTmFtZX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufSBTZXR1cC5leGVgLFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBhcHBEaXJlY3Rvcnk6IGRpcixcbiAgICAgIG91dHB1dERpcmVjdG9yeTogb3V0UGF0aCxcbiAgICB9O1xuXG4gICAgYXdhaXQgY3JlYXRlV2luZG93c0luc3RhbGxlcih3aW5zdGFsbGVyQ29uZmlnKTtcblxuICAgIGNvbnN0IGFydGlmYWN0cyA9IFtcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCAnUkVMRUFTRVMnKSxcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCB3aW5zdGFsbGVyQ29uZmlnLnNldHVwRXhlIHx8IGAke2FwcE5hbWV9U2V0dXAuZXhlYCksXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgYCR7d2luc3RhbGxlckNvbmZpZy5uYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259LWZ1bGwubnVwa2dgKSxcbiAgICBdO1xuICAgIGNvbnN0IGRlbHRhUGF0aCA9IHBhdGgucmVzb2x2ZShvdXRQYXRoLCBgJHt3aW5zdGFsbGVyQ29uZmlnLm5hbWV9LSR7cGFja2FnZUpTT04udmVyc2lvbn0tZGVsdGEubnVwa2dgKTtcbiAgICBpZiAod2luc3RhbGxlckNvbmZpZy5yZW1vdGVSZWxlYXNlcyB8fCBhd2FpdCBmcy5wYXRoRXhpc3RzKGRlbHRhUGF0aCkpIHtcbiAgICAgIGFydGlmYWN0cy5wdXNoKGRlbHRhUGF0aCk7XG4gICAgfVxuICAgIGNvbnN0IG1zaVBhdGggPSBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cE1zaSB8fCBgJHthcHBOYW1lfVNldHVwLm1zaWApO1xuICAgIGlmICghd2luc3RhbGxlckNvbmZpZy5ub01zaSAmJiBhd2FpdCBmcy5wYXRoRXhpc3RzKG1zaVBhdGgpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChtc2lQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFydGlmYWN0cztcbiAgfVxufVxuIl19