"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMakeOptions = getMakeOptions;

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

require("./util/terminate");

var _workingDir = _interopRequireDefault(require("./util/working-dir"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line import/prefer-default-export
async function getMakeOptions() {
  let dir = process.cwd();

  _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--skip-package', 'Assume the app is already packaged').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').option('--targets [targets]', 'Override your make targets for this run').allowUnknownOption(true).action(cwd => {
    dir = (0, _workingDir.default)(dir, cwd);
  }).parse(process.argv);

  const makeOpts = {
    dir,
    interactive: true,
    skipPackage: _commander.default.skipPackage
  };
  if (_commander.default.targets) makeOpts.overrideTargets = _commander.default.targets.split(',');
  if (_commander.default.arch) makeOpts.arch = _commander.default.arch;
  if (_commander.default.platform) makeOpts.platform = _commander.default.platform;
  return makeOpts;
} // eslint-disable-next-line no-underscore-dangle


if (process.mainModule === module || global.__LINKED_FORGE__) {
  (async () => {
    const makeOpts = await getMakeOptions();
    await _core.api.make(makeOpts);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1tYWtlLnRzIl0sIm5hbWVzIjpbImdldE1ha2VPcHRpb25zIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsInByb2dyYW0iLCJ2ZXJzaW9uIiwiZnMiLCJyZWFkSnNvbiIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiYXJndW1lbnRzIiwib3B0aW9uIiwiYWxsb3dVbmtub3duT3B0aW9uIiwiYWN0aW9uIiwicGFyc2UiLCJhcmd2IiwibWFrZU9wdHMiLCJpbnRlcmFjdGl2ZSIsInNraXBQYWNrYWdlIiwidGFyZ2V0cyIsIm92ZXJyaWRlVGFyZ2V0cyIsInNwbGl0IiwiYXJjaCIsInBsYXRmb3JtIiwibWFpbk1vZHVsZSIsIm1vZHVsZSIsImdsb2JhbCIsIl9fTElOS0VEX0ZPUkdFX18iLCJhcGkiLCJtYWtlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBO0FBQ08sZUFBZUEsY0FBZixHQUFnQztBQUNyQyxNQUFJQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixFQUFWOztBQUNBQyxxQkFDR0MsT0FESCxDQUNXLENBQUMsTUFBTUMsaUJBQUdDLFFBQUgsQ0FBWUMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLGlCQUF4QixDQUFaLENBQVAsRUFBZ0VMLE9BRDNFLEVBRUdNLFNBRkgsQ0FFYSxPQUZiLEVBR0dDLE1BSEgsQ0FHVSxnQkFIVixFQUc0QixvQ0FINUIsRUFJR0EsTUFKSCxDQUlVLG1CQUpWLEVBSStCLHFCQUovQixFQUtHQSxNQUxILENBS1UsMkJBTFYsRUFLdUMsdUJBTHZDLEVBTUdBLE1BTkgsQ0FNVSxxQkFOVixFQU1pQyx5Q0FOakMsRUFPR0Msa0JBUEgsQ0FPc0IsSUFQdEIsRUFRR0MsTUFSSCxDQVFXWCxHQUFELElBQVM7QUFBRUYsSUFBQUEsR0FBRyxHQUFHLHlCQUFXQSxHQUFYLEVBQWdCRSxHQUFoQixDQUFOO0FBQTZCLEdBUmxELEVBU0dZLEtBVEgsQ0FTU2IsT0FBTyxDQUFDYyxJQVRqQjs7QUFXQSxRQUFNQyxRQUFxQixHQUFHO0FBQzVCaEIsSUFBQUEsR0FENEI7QUFFNUJpQixJQUFBQSxXQUFXLEVBQUUsSUFGZTtBQUc1QkMsSUFBQUEsV0FBVyxFQUFFZixtQkFBUWU7QUFITyxHQUE5QjtBQUtBLE1BQUlmLG1CQUFRZ0IsT0FBWixFQUFxQkgsUUFBUSxDQUFDSSxlQUFULEdBQTJCakIsbUJBQVFnQixPQUFSLENBQWdCRSxLQUFoQixDQUFzQixHQUF0QixDQUEzQjtBQUNyQixNQUFJbEIsbUJBQVFtQixJQUFaLEVBQWtCTixRQUFRLENBQUNNLElBQVQsR0FBZ0JuQixtQkFBUW1CLElBQXhCO0FBQ2xCLE1BQUluQixtQkFBUW9CLFFBQVosRUFBc0JQLFFBQVEsQ0FBQ08sUUFBVCxHQUFvQnBCLG1CQUFRb0IsUUFBNUI7QUFFdEIsU0FBT1AsUUFBUDtBQUNELEMsQ0FFRDs7O0FBQ0EsSUFBSWYsT0FBTyxDQUFDdUIsVUFBUixLQUF1QkMsTUFBdkIsSUFBa0NDLE1BQUQsQ0FBZ0JDLGdCQUFyRCxFQUF1RTtBQUNyRSxHQUFDLFlBQVk7QUFDWCxVQUFNWCxRQUFRLEdBQUcsTUFBTWpCLGNBQWMsRUFBckM7QUFFQSxVQUFNNkIsVUFBSUMsSUFBSixDQUFTYixRQUFULENBQU47QUFDRCxHQUpEO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIE1ha2VPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuaW1wb3J0IHdvcmtpbmdEaXIgZnJvbSAnLi91dGlsL3dvcmtpbmctZGlyJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNYWtlT3B0aW9ucygpIHtcbiAgbGV0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gIHByb2dyYW1cbiAgICAudmVyc2lvbigoYXdhaXQgZnMucmVhZEpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3BhY2thZ2UuanNvbicpKSkudmVyc2lvbilcbiAgICAuYXJndW1lbnRzKCdbY3dkXScpXG4gICAgLm9wdGlvbignLS1za2lwLXBhY2thZ2UnLCAnQXNzdW1lIHRoZSBhcHAgaXMgYWxyZWFkeSBwYWNrYWdlZCcpXG4gICAgLm9wdGlvbignLWEsIC0tYXJjaCBbYXJjaF0nLCAnVGFyZ2V0IGFyY2hpdGVjdHVyZScpXG4gICAgLm9wdGlvbignLXAsIC0tcGxhdGZvcm0gW3BsYXRmb3JtXScsICdUYXJnZXQgYnVpbGQgcGxhdGZvcm0nKVxuICAgIC5vcHRpb24oJy0tdGFyZ2V0cyBbdGFyZ2V0c10nLCAnT3ZlcnJpZGUgeW91ciBtYWtlIHRhcmdldHMgZm9yIHRoaXMgcnVuJylcbiAgICAuYWxsb3dVbmtub3duT3B0aW9uKHRydWUpXG4gICAgLmFjdGlvbigoY3dkKSA9PiB7IGRpciA9IHdvcmtpbmdEaXIoZGlyLCBjd2QpOyB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IG1ha2VPcHRzOiBNYWtlT3B0aW9ucyA9IHtcbiAgICBkaXIsXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgc2tpcFBhY2thZ2U6IHByb2dyYW0uc2tpcFBhY2thZ2UsXG4gIH07XG4gIGlmIChwcm9ncmFtLnRhcmdldHMpIG1ha2VPcHRzLm92ZXJyaWRlVGFyZ2V0cyA9IHByb2dyYW0udGFyZ2V0cy5zcGxpdCgnLCcpO1xuICBpZiAocHJvZ3JhbS5hcmNoKSBtYWtlT3B0cy5hcmNoID0gcHJvZ3JhbS5hcmNoO1xuICBpZiAocHJvZ3JhbS5wbGF0Zm9ybSkgbWFrZU9wdHMucGxhdGZvcm0gPSBwcm9ncmFtLnBsYXRmb3JtO1xuXG4gIHJldHVybiBtYWtlT3B0cztcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG5pZiAocHJvY2Vzcy5tYWluTW9kdWxlID09PSBtb2R1bGUgfHwgKGdsb2JhbCBhcyBhbnkpLl9fTElOS0VEX0ZPUkdFX18pIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtYWtlT3B0cyA9IGF3YWl0IGdldE1ha2VPcHRpb25zKCk7XG5cbiAgICBhd2FpdCBhcGkubWFrZShtYWtlT3B0cyk7XG4gIH0pKCk7XG59XG4iXX0=