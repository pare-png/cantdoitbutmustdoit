"use strict";

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

require("./util/terminate");

var _workingDir = _interopRequireDefault(require("./util/working-dir"));

var _electronForgeMake = require("./electron-forge-make");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  let dir = process.cwd();

  _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--target [target[,target...]]', 'The comma-separated deployment targets, defaults to "github"').option('--dry-run', 'Triggers a publish dry run which saves state and doesn\'t upload anything').option('--from-dry-run', 'Attempts to publish artifacts from the last saved dry run').allowUnknownOption(true).action(cwd => {
    dir = (0, _workingDir.default)(dir, cwd);
  }).parse(process.argv);

  const publishOpts = {
    dir,
    interactive: true,
    dryRun: _commander.default.dryRun,
    dryRunResume: _commander.default.fromDryRun
  };
  if (_commander.default.target) publishOpts.publishTargets = _commander.default.target.split(',');
  publishOpts.makeOptions = await (0, _electronForgeMake.getMakeOptions)();
  await _core.api.publish(publishOpts);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1wdWJsaXNoLnRzIl0sIm5hbWVzIjpbImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsImZzIiwicmVhZEpzb24iLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFsbG93VW5rbm93bk9wdGlvbiIsImFjdGlvbiIsInBhcnNlIiwiYXJndiIsInB1Ymxpc2hPcHRzIiwiaW50ZXJhY3RpdmUiLCJkcnlSdW4iLCJkcnlSdW5SZXN1bWUiLCJmcm9tRHJ5UnVuIiwidGFyZ2V0IiwicHVibGlzaFRhcmdldHMiLCJzcGxpdCIsIm1ha2VPcHRpb25zIiwiYXBpIiwicHVibGlzaCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsQ0FBQyxZQUFZO0FBQ1gsTUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsRUFBVjs7QUFDQUMscUJBQ0dDLE9BREgsQ0FDVyxDQUFDLE1BQU1DLGlCQUFHQyxRQUFILENBQVlDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixpQkFBeEIsQ0FBWixDQUFQLEVBQWdFTCxPQUQzRSxFQUVHTSxTQUZILENBRWEsT0FGYixFQUdHQyxNQUhILENBR1UsK0JBSFYsRUFHMkMsOERBSDNDLEVBSUdBLE1BSkgsQ0FJVSxXQUpWLEVBSXVCLDJFQUp2QixFQUtHQSxNQUxILENBS1UsZ0JBTFYsRUFLNEIsMkRBTDVCLEVBTUdDLGtCQU5ILENBTXNCLElBTnRCLEVBT0dDLE1BUEgsQ0FPV1gsR0FBRCxJQUFTO0FBQUVGLElBQUFBLEdBQUcsR0FBRyx5QkFBV0EsR0FBWCxFQUFnQkUsR0FBaEIsQ0FBTjtBQUE2QixHQVBsRCxFQVFHWSxLQVJILENBUVNiLE9BQU8sQ0FBQ2MsSUFSakI7O0FBVUEsUUFBTUMsV0FBMkIsR0FBRztBQUNsQ2hCLElBQUFBLEdBRGtDO0FBRWxDaUIsSUFBQUEsV0FBVyxFQUFFLElBRnFCO0FBR2xDQyxJQUFBQSxNQUFNLEVBQUVmLG1CQUFRZSxNQUhrQjtBQUlsQ0MsSUFBQUEsWUFBWSxFQUFFaEIsbUJBQVFpQjtBQUpZLEdBQXBDO0FBTUEsTUFBSWpCLG1CQUFRa0IsTUFBWixFQUFvQkwsV0FBVyxDQUFDTSxjQUFaLEdBQTZCbkIsbUJBQVFrQixNQUFSLENBQWVFLEtBQWYsQ0FBcUIsR0FBckIsQ0FBN0I7QUFFcEJQLEVBQUFBLFdBQVcsQ0FBQ1EsV0FBWixHQUEwQixNQUFNLHdDQUFoQztBQUVBLFFBQU1DLFVBQUlDLE9BQUosQ0FBWVYsV0FBWixDQUFOO0FBQ0QsQ0F2QkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIFB1Ymxpc2hPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuaW1wb3J0IHdvcmtpbmdEaXIgZnJvbSAnLi91dGlsL3dvcmtpbmctZGlyJztcbmltcG9ydCB7IGdldE1ha2VPcHRpb25zIH0gZnJvbSAnLi9lbGVjdHJvbi1mb3JnZS1tYWtlJztcblxuKGFzeW5jICgpID0+IHtcbiAgbGV0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gIHByb2dyYW1cbiAgICAudmVyc2lvbigoYXdhaXQgZnMucmVhZEpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3BhY2thZ2UuanNvbicpKSkudmVyc2lvbilcbiAgICAuYXJndW1lbnRzKCdbY3dkXScpXG4gICAgLm9wdGlvbignLS10YXJnZXQgW3RhcmdldFssdGFyZ2V0Li4uXV0nLCAnVGhlIGNvbW1hLXNlcGFyYXRlZCBkZXBsb3ltZW50IHRhcmdldHMsIGRlZmF1bHRzIHRvIFwiZ2l0aHViXCInKVxuICAgIC5vcHRpb24oJy0tZHJ5LXJ1bicsICdUcmlnZ2VycyBhIHB1Ymxpc2ggZHJ5IHJ1biB3aGljaCBzYXZlcyBzdGF0ZSBhbmQgZG9lc25cXCd0IHVwbG9hZCBhbnl0aGluZycpXG4gICAgLm9wdGlvbignLS1mcm9tLWRyeS1ydW4nLCAnQXR0ZW1wdHMgdG8gcHVibGlzaCBhcnRpZmFjdHMgZnJvbSB0aGUgbGFzdCBzYXZlZCBkcnkgcnVuJylcbiAgICAuYWxsb3dVbmtub3duT3B0aW9uKHRydWUpXG4gICAgLmFjdGlvbigoY3dkKSA9PiB7IGRpciA9IHdvcmtpbmdEaXIoZGlyLCBjd2QpOyB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IHB1Ymxpc2hPcHRzOiBQdWJsaXNoT3B0aW9ucyA9IHtcbiAgICBkaXIsXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgZHJ5UnVuOiBwcm9ncmFtLmRyeVJ1bixcbiAgICBkcnlSdW5SZXN1bWU6IHByb2dyYW0uZnJvbURyeVJ1bixcbiAgfTtcbiAgaWYgKHByb2dyYW0udGFyZ2V0KSBwdWJsaXNoT3B0cy5wdWJsaXNoVGFyZ2V0cyA9IHByb2dyYW0udGFyZ2V0LnNwbGl0KCcsJyk7XG5cbiAgcHVibGlzaE9wdHMubWFrZU9wdGlvbnMgPSBhd2FpdCBnZXRNYWtlT3B0aW9ucygpO1xuXG4gIGF3YWl0IGFwaS5wdWJsaXNoKHB1Ymxpc2hPcHRzKTtcbn0pKCk7XG4iXX0=