"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const currentVersion = require('../package').version;

const copyTemplateFile = async (destDir, basename) => {
  const templateDir = _path.default.resolve(__dirname, '..', 'tmpl');

  await _fsExtra.default.copy(_path.default.join(templateDir, basename), _path.default.resolve(destDir, basename));
};

const updateFileByLine = async (inputPath, lineHandler, outputPath = undefined) => {
  const fileContents = (await _fsExtra.default.readFile(inputPath, 'utf8')).split('\n').map(lineHandler).join('\n');
  await _fsExtra.default.writeFile(outputPath || inputPath, fileContents);

  if (outputPath !== undefined) {
    await _fsExtra.default.remove(inputPath);
  }
};

class WebpackTemplate {
  constructor() {
    _defineProperty(this, "devDependencies", [`@electron-forge/plugin-webpack@${currentVersion}`, // TODO: Use the @zeit publish once https://github.com/zeit/webpack-asset-relocator-loader/pull/41 has been merged
    '@marshallofsound/webpack-asset-relocator-loader@^0.5.0', 'css-loader@^3.0.0', 'node-loader@^0.6.0', 'style-loader@^0.23.1']);

    _defineProperty(this, "initializeTemplate", async directory => {
      await (0, _asyncOra.asyncOra)('Setting up Forge configuration', async () => {
        const pjPath = _path.default.resolve(directory, 'package.json');

        const currentPJ = await _fsExtra.default.readJson(pjPath);
        currentPJ.main = '.webpack/main';
        currentPJ.config.forge.plugins = currentPJ.config.forge.plugins || [];
        currentPJ.config.forge.plugins.push(['@electron-forge/plugin-webpack', {
          mainConfig: './webpack.main.config.js',
          renderer: {
            config: './webpack.renderer.config.js',
            entryPoints: [{
              html: './src/index.html',
              js: './src/renderer.js',
              name: 'main_window'
            }]
          }
        }]);
        await _fsExtra.default.writeJson(pjPath, currentPJ, {
          spaces: 2
        });
      });
      await (0, _asyncOra.asyncOra)('Setting up webpack configuration', async () => {
        await copyTemplateFile(directory, 'webpack.main.config.js');
        await copyTemplateFile(directory, 'webpack.renderer.config.js');
        await copyTemplateFile(directory, 'webpack.rules.js');
        await copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.js');
        await updateFileByLine(_path.default.resolve(directory, 'src', 'index.js'), line => {
          if (line.includes('mainWindow.loadURL')) return '  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);';
          return line;
        }, _path.default.resolve(directory, 'src', 'main.js'));
        await updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), line => {
          if (line.includes('link rel="stylesheet"')) return '';
          return line;
        });
      });
    });
  }

}

var _default = new WebpackTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJwYWNrVGVtcGxhdGUudHMiXSwibmFtZXMiOlsiY3VycmVudFZlcnNpb24iLCJyZXF1aXJlIiwidmVyc2lvbiIsImNvcHlUZW1wbGF0ZUZpbGUiLCJkZXN0RGlyIiwiYmFzZW5hbWUiLCJ0ZW1wbGF0ZURpciIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiZnMiLCJjb3B5Iiwiam9pbiIsInVwZGF0ZUZpbGVCeUxpbmUiLCJpbnB1dFBhdGgiLCJsaW5lSGFuZGxlciIsIm91dHB1dFBhdGgiLCJ1bmRlZmluZWQiLCJmaWxlQ29udGVudHMiLCJyZWFkRmlsZSIsInNwbGl0IiwibWFwIiwid3JpdGVGaWxlIiwicmVtb3ZlIiwiV2VicGFja1RlbXBsYXRlIiwiZGlyZWN0b3J5IiwicGpQYXRoIiwiY3VycmVudFBKIiwicmVhZEpzb24iLCJtYWluIiwiY29uZmlnIiwiZm9yZ2UiLCJwbHVnaW5zIiwicHVzaCIsIm1haW5Db25maWciLCJyZW5kZXJlciIsImVudHJ5UG9pbnRzIiwiaHRtbCIsImpzIiwibmFtZSIsIndyaXRlSnNvbiIsInNwYWNlcyIsImxpbmUiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLGNBQWMsR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkMsT0FBN0M7O0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsT0FBT0MsT0FBUCxFQUF3QkMsUUFBeEIsS0FBNkM7QUFDcEUsUUFBTUMsV0FBVyxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsSUFBeEIsRUFBOEIsTUFBOUIsQ0FBcEI7O0FBQ0EsUUFBTUMsaUJBQUdDLElBQUgsQ0FBUUosY0FBS0ssSUFBTCxDQUFVTixXQUFWLEVBQXVCRCxRQUF2QixDQUFSLEVBQTBDRSxjQUFLQyxPQUFMLENBQWFKLE9BQWIsRUFBc0JDLFFBQXRCLENBQTFDLENBQU47QUFDRCxDQUhEOztBQUtBLE1B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Q0FBQ04sY0FBS0MsT0FBTCxDQUFhaUIsU0FBYixFQUF3QixLQUF4QixFQUErQixZQUEvQixDQUFELEVBQWdEaUIsSUFBRCxJQUFVO0FBQzdFLGNBQUlBLElBQUksQ0FBQ0MsUUFBTCxDQUFjLHVCQUFkLENBQUosRUFBNEMsT0FBTyxFQUFQO0FBQzVDLGlCQUFPRCxJQUFQO0FBQ0QsU0FIcUIsQ0FBdEI7QUFJRCxPQWZLLENBQU47QUFnQkQsS0FsRDRDO0FBQUE7O0FBQUE7O2VBcURoQyxJQUFJbEIsZUFBSixFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgYXN5bmNPcmEgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcblxuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBjdXJyZW50VmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UnKS52ZXJzaW9uO1xuXG5jb25zdCBjb3B5VGVtcGxhdGVGaWxlID0gYXN5bmMgKGRlc3REaXI6IHN0cmluZywgYmFzZW5hbWU6IHN0cmluZykgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZURpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICd0bXBsJyk7XG4gIGF3YWl0IGZzLmNvcHkocGF0aC5qb2luKHRlbXBsYXRlRGlyLCBiYXNlbmFtZSksIHBhdGgucmVzb2x2ZShkZXN0RGlyLCBiYXNlbmFtZSkpO1xufTtcblxuY29uc3QgdXBkYXRlRmlsZUJ5TGluZSA9IGFzeW5jIChcbiAgaW5wdXRQYXRoOiBzdHJpbmcsXG4gIGxpbmVIYW5kbGVyOiAobGluZTogc3RyaW5nKSA9PiBzdHJpbmcsXG4gIG91dHB1dFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbikgPT4ge1xuICBjb25zdCBmaWxlQ29udGVudHMgPSAoYXdhaXQgZnMucmVhZEZpbGUoaW5wdXRQYXRoLCAndXRmOCcpKS5zcGxpdCgnXFxuJykubWFwKGxpbmVIYW5kbGVyKS5qb2luKCdcXG4nKTtcbiAgYXdhaXQgZnMud3JpdGVGaWxlKG91dHB1dFBhdGggfHwgaW5wdXRQYXRoLCBmaWxlQ29udGVudHMpO1xuICBpZiAob3V0cHV0UGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgYXdhaXQgZnMucmVtb3ZlKGlucHV0UGF0aCk7XG4gIH1cbn07XG5cbmNsYXNzIFdlYnBhY2tUZW1wbGF0ZSBpbXBsZW1lbnRzIEZvcmdlVGVtcGxhdGUge1xuICBwdWJsaWMgZGV2RGVwZW5kZW5jaWVzID0gW1xuICAgIGBAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLXdlYnBhY2tAJHtjdXJyZW50VmVyc2lvbn1gLFxuICAgIC8vIFRPRE86IFVzZSB0aGUgQHplaXQgcHVibGlzaCBvbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS96ZWl0L3dlYnBhY2stYXNzZXQtcmVsb2NhdG9yLWxvYWRlci9wdWxsLzQxIGhhcyBiZWVuIG1lcmdlZFxuICAgICdAbWFyc2hhbGxvZnNvdW5kL3dlYnBhY2stYXNzZXQtcmVsb2NhdG9yLWxvYWRlckBeMC41LjAnLFxuICAgICdjc3MtbG9hZGVyQF4zLjAuMCcsXG4gICAgJ25vZGUtbG9hZGVyQF4wLjYuMCcsXG4gICAgJ3N0eWxlLWxvYWRlckBeMC4yMy4xJyxcbiAgXTtcblxuICBwdWJsaWMgaW5pdGlhbGl6ZVRlbXBsYXRlID0gYXN5bmMgKGRpcmVjdG9yeTogc3RyaW5nKSA9PiB7XG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgRm9yZ2UgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBqUGF0aCA9IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRQSiA9IGF3YWl0IGZzLnJlYWRKc29uKHBqUGF0aCk7XG4gICAgICBjdXJyZW50UEoubWFpbiA9ICcud2VicGFjay9tYWluJztcbiAgICAgIGN1cnJlbnRQSi5jb25maWcuZm9yZ2UucGx1Z2lucyA9IGN1cnJlbnRQSi5jb25maWcuZm9yZ2UucGx1Z2lucyB8fCBbXTtcbiAgICAgIGN1cnJlbnRQSi5jb25maWcuZm9yZ2UucGx1Z2lucy5wdXNoKFtcbiAgICAgICAgJ0BlbGVjdHJvbi1mb3JnZS9wbHVnaW4td2VicGFjaycsXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluQ29uZmlnOiAnLi93ZWJwYWNrLm1haW4uY29uZmlnLmpzJyxcbiAgICAgICAgICByZW5kZXJlcjoge1xuICAgICAgICAgICAgY29uZmlnOiAnLi93ZWJwYWNrLnJlbmRlcmVyLmNvbmZpZy5qcycsXG4gICAgICAgICAgICBlbnRyeVBvaW50czogW3tcbiAgICAgICAgICAgICAgaHRtbDogJy4vc3JjL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgICBqczogJy4vc3JjL3JlbmRlcmVyLmpzJyxcbiAgICAgICAgICAgICAgbmFtZTogJ21haW5fd2luZG93JyxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICAgIGF3YWl0IGZzLndyaXRlSnNvbihwalBhdGgsIGN1cnJlbnRQSiwge1xuICAgICAgICBzcGFjZXM6IDIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBhd2FpdCBhc3luY09yYSgnU2V0dGluZyB1cCB3ZWJwYWNrIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBjb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2subWFpbi5jb25maWcuanMnKTtcbiAgICAgIGF3YWl0IGNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5yZW5kZXJlci5jb25maWcuanMnKTtcbiAgICAgIGF3YWl0IGNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5ydWxlcy5qcycpO1xuICAgICAgYXdhaXQgY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdyZW5kZXJlci5qcycpO1xuXG4gICAgICBhd2FpdCB1cGRhdGVGaWxlQnlMaW5lKHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMnLCAnaW5kZXguanMnKSwgKGxpbmUpID0+IHtcbiAgICAgICAgaWYgKGxpbmUuaW5jbHVkZXMoJ21haW5XaW5kb3cubG9hZFVSTCcpKSByZXR1cm4gJyAgbWFpbldpbmRvdy5sb2FkVVJMKE1BSU5fV0lORE9XX1dFQlBBQ0tfRU5UUlkpOyc7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfSwgcGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdtYWluLmpzJykpO1xuXG4gICAgICBhd2FpdCB1cGRhdGVGaWxlQnlMaW5lKHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMnLCAnaW5kZXguaHRtbCcpLCAobGluZSkgPT4ge1xuICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnbGluayByZWw9XCJzdHlsZXNoZWV0XCInKSkgcmV0dXJuICcnO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBXZWJwYWNrVGVtcGxhdGUoKTtcbiJdfQ==