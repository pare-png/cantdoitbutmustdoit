"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInitialForgeConfig = setInitialForgeConfig;
exports.fromBuildIdentifier = fromBuildIdentifier;
exports.default = void 0;

require("source-map-support/register");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.template"));

var _readPackageJson = require("./read-package-json");

var _pluginInterface = _interopRequireDefault(require("./plugin-interface"));

var _hook = require("./hook");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const underscoreCase = str => str.replace(/(.)([A-Z][a-z]+)/g, '$1_$2').replace(/([a-z0-9])([A-Z])/g, '$1_$2').toUpperCase(); // eslint-disable-next-line arrow-parens


const proxify = (buildIdentifier, object, envPrefix) => {
  let newObject = {};

  if (Array.isArray(object)) {
    newObject = [];
  }

  Object.keys(object).forEach(key => {
    const val = object[key];

    if (typeof val === 'object' && key !== 'pluginInterface' && !(val instanceof RegExp)) {
      newObject[key] = proxify(buildIdentifier, object[key], `${envPrefix}_${underscoreCase(key)}`);
    } else {
      newObject[key] = object[key];
    }
  });
  return new Proxy(newObject, {
    get(target, name, receiver) {
      // eslint-disable-next-line no-prototype-builtins
      if (!target.hasOwnProperty(name) && typeof name === 'string') {
        const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
        if (envValue) return envValue;
      }

      const value = Reflect.get(target, name, receiver); // eslint-disable-next-line no-underscore-dangle

      if (value && typeof value === 'object' && value.__isMagicBuildIdentifierMap) {
        const identifier = typeof buildIdentifier === 'function' ? buildIdentifier() : buildIdentifier;
        return value.map[identifier];
      }

      return value;
    },

    getOwnPropertyDescriptor(target, name) {
      const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`]; // eslint-disable-next-line no-prototype-builtins

      if (target.hasOwnProperty(name)) {
        return Reflect.getOwnPropertyDescriptor(target, name);
      }

      if (envValue) {
        return {
          writable: true,
          enumerable: true,
          configurable: true,
          value: envValue
        };
      }

      return undefined;
    }

  });
};
/**
 * Sets sensible defaults for the `config.forge` object.
 */


function setInitialForgeConfig(packageJSON) {
  const {
    name = ''
  } = packageJSON;
  packageJSON.config.forge.makers[0].config.name = name.replace(/-/g, '_');
}

function fromBuildIdentifier(map) {
  return {
    map,
    __isMagicBuildIdentifierMap: true
  };
}

async function forgeConfigIsValidFilePath(dir, forgeConfig) {
  return typeof forgeConfig === 'string' && ((await _fsExtra.default.pathExists(_path.default.resolve(dir, forgeConfig))) || _fsExtra.default.pathExists(_path.default.resolve(dir, `${forgeConfig}.js`)));
}

var _default = async dir => {
  const packageJSON = await (0, _readPackageJson.readRawPackageJson)(dir);
  let forgeConfig = packageJSON.config && packageJSON.config.forge ? packageJSON.config.forge : null;

  if (!forgeConfig) {
    if (await _fsExtra.default.pathExists(_path.default.resolve(dir, 'forge.config.js'))) {
      forgeConfig = 'forge.config.js';
    } else {
      forgeConfig = {};
    }
  }

  if (await forgeConfigIsValidFilePath(dir, forgeConfig)) {
    try {
      // eslint-disable-next-line global-require, import/no-dynamic-require
      forgeConfig = require(_path.default.resolve(dir, forgeConfig));
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error(`Failed to load: ${_path.default.resolve(dir, forgeConfig)}`);
      throw err;
    }
  } else if (typeof forgeConfig !== 'object') {
    throw new Error('Expected packageJSON.config.forge to be an object or point to a requirable JS file');
  }

  forgeConfig = _objectSpread({
    electronRebuildConfig: {},
    packagerConfig: {},
    makers: [],
    publishers: [],
    plugins: []
  }, forgeConfig);

  const templateObj = _objectSpread({}, packageJSON, {
    year: new Date().getFullYear()
  });

  const template = obj => {
    Object.keys(obj).forEach(objKey => {
      if (typeof obj[objKey] === 'object' && obj !== null) {
        template(obj[objKey]);
      } else if (typeof obj[objKey] === 'string') {
        obj[objKey] = (0, _lodash.default)(obj[objKey])(templateObj);

        if (obj[objKey].startsWith('require:')) {
          // eslint-disable-next-line global-require, import/no-dynamic-require
          obj[objKey] = require(_path.default.resolve(dir, obj[objKey].substr(8)));
        }
      }
    });
  };

  template(forgeConfig);
  forgeConfig.pluginInterface = new _pluginInterface.default(dir, forgeConfig);
  forgeConfig = await (0, _hook.runMutatingHook)(forgeConfig, 'resolveForgeConfig', forgeConfig);
  return proxify(forgeConfig.buildIdentifier || '', forgeConfig, 'ELECTRON_FORGE');
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,