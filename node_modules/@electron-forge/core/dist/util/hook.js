"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runMutatingHook = runMutatingHook;
exports.runHook = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:hook');

const runHook = async (forgeConfig, hookName, ...hookArgs) => {
  const {
    hooks
  } = forgeConfig;

  if (hooks) {
    d(`hook triggered: ${hookName}`);

    if (typeof hooks[hookName] === 'function') {
      d('calling hook:', hookName, 'with args:', hookArgs);
      await hooks[hookName](forgeConfig, ...hookArgs);
    }
  }

  await forgeConfig.pluginInterface.triggerHook(hookName, hookArgs);
};

exports.runHook = runHook;

async function runMutatingHook(forgeConfig, hookName, item) {
  const {
    hooks
  } = forgeConfig;

  if (hooks) {
    d(`hook triggered: ${hookName}`);

    if (typeof hooks[hookName] === 'function') {
      d('calling mutating hook:', hookName, 'with item:', item);
      const result = await hooks[hookName](forgeConfig, item);

      if (typeof result !== 'undefined') {
        item = result;
      }
    }
  }

  return forgeConfig.pluginInterface.triggerMutatingHook(hookName, item);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hvb2sudHMiXSwibmFtZXMiOlsiZCIsInJ1bkhvb2siLCJmb3JnZUNvbmZpZyIsImhvb2tOYW1lIiwiaG9va0FyZ3MiLCJob29rcyIsInBsdWdpbkludGVyZmFjZSIsInRyaWdnZXJIb29rIiwicnVuTXV0YXRpbmdIb29rIiwiaXRlbSIsInJlc3VsdCIsInRyaWdnZXJNdXRhdGluZ0hvb2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxxQkFBTixDQUFWOztBQUVPLE1BQU1DLE9BQU8sR0FBRyxPQUFPQyxXQUFQLEVBQWlDQyxRQUFqQyxFQUFtRCxHQUFHQyxRQUF0RCxLQUEwRTtBQUMvRixRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBWUgsV0FBbEI7O0FBQ0EsTUFBSUcsS0FBSixFQUFXO0FBQ1RMLElBQUFBLENBQUMsQ0FBRSxtQkFBa0JHLFFBQVMsRUFBN0IsQ0FBRDs7QUFDQSxRQUFJLE9BQU9FLEtBQUssQ0FBQ0YsUUFBRCxDQUFaLEtBQTJCLFVBQS9CLEVBQTJDO0FBQ3pDSCxNQUFBQSxDQUFDLENBQUMsZUFBRCxFQUFrQkcsUUFBbEIsRUFBNEIsWUFBNUIsRUFBMENDLFFBQTFDLENBQUQ7QUFDQSxZQUFNQyxLQUFLLENBQUNGLFFBQUQsQ0FBTCxDQUFnQkQsV0FBaEIsRUFBNkIsR0FBR0UsUUFBaEMsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBTUYsV0FBVyxDQUFDSSxlQUFaLENBQTRCQyxXQUE1QixDQUF3Q0osUUFBeEMsRUFBa0RDLFFBQWxELENBQU47QUFDRCxDQVZNOzs7O0FBWUEsZUFBZUksZUFBZixDQUNMTixXQURLLEVBRUxDLFFBRkssRUFHTE0sSUFISyxFQUlPO0FBQ1osUUFBTTtBQUFFSixJQUFBQTtBQUFGLE1BQVlILFdBQWxCOztBQUNBLE1BQUlHLEtBQUosRUFBVztBQUNUTCxJQUFBQSxDQUFDLENBQUUsbUJBQWtCRyxRQUFTLEVBQTdCLENBQUQ7O0FBQ0EsUUFBSSxPQUFPRSxLQUFLLENBQUNGLFFBQUQsQ0FBWixLQUEyQixVQUEvQixFQUEyQztBQUN6Q0gsTUFBQUEsQ0FBQyxDQUFDLHdCQUFELEVBQTJCRyxRQUEzQixFQUFxQyxZQUFyQyxFQUFtRE0sSUFBbkQsQ0FBRDtBQUNBLFlBQU1DLE1BQU0sR0FBRyxNQUFNTCxLQUFLLENBQUNGLFFBQUQsQ0FBTCxDQUFnQkQsV0FBaEIsRUFBNkJPLElBQTdCLENBQXJCOztBQUNBLFVBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQ0QsUUFBQUEsSUFBSSxHQUFHQyxNQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUNELFNBQU9SLFdBQVcsQ0FBQ0ksZUFBWixDQUE0QkssbUJBQTVCLENBQWdEUixRQUFoRCxFQUEwRE0sSUFBMUQsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VDb25maWcgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aG9vaycpO1xuXG5leHBvcnQgY29uc3QgcnVuSG9vayA9IGFzeW5jIChmb3JnZUNvbmZpZzogRm9yZ2VDb25maWcsIGhvb2tOYW1lOiBzdHJpbmcsIC4uLmhvb2tBcmdzOiBhbnlbXSkgPT4ge1xuICBjb25zdCB7IGhvb2tzIH0gPSBmb3JnZUNvbmZpZztcbiAgaWYgKGhvb2tzKSB7XG4gICAgZChgaG9vayB0cmlnZ2VyZWQ6ICR7aG9va05hbWV9YCk7XG4gICAgaWYgKHR5cGVvZiBob29rc1tob29rTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGQoJ2NhbGxpbmcgaG9vazonLCBob29rTmFtZSwgJ3dpdGggYXJnczonLCBob29rQXJncyk7XG4gICAgICBhd2FpdCBob29rc1tob29rTmFtZV0oZm9yZ2VDb25maWcsIC4uLmhvb2tBcmdzKTtcbiAgICB9XG4gIH1cbiAgYXdhaXQgZm9yZ2VDb25maWcucGx1Z2luSW50ZXJmYWNlLnRyaWdnZXJIb29rKGhvb2tOYW1lLCBob29rQXJncyk7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuTXV0YXRpbmdIb29rPFQ+KFxuICBmb3JnZUNvbmZpZzogRm9yZ2VDb25maWcsXG4gIGhvb2tOYW1lOiBzdHJpbmcsXG4gIGl0ZW06IFQsXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgeyBob29rcyB9ID0gZm9yZ2VDb25maWc7XG4gIGlmIChob29rcykge1xuICAgIGQoYGhvb2sgdHJpZ2dlcmVkOiAke2hvb2tOYW1lfWApO1xuICAgIGlmICh0eXBlb2YgaG9va3NbaG9va05hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkKCdjYWxsaW5nIG11dGF0aW5nIGhvb2s6JywgaG9va05hbWUsICd3aXRoIGl0ZW06JywgaXRlbSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBob29rc1tob29rTmFtZV0oZm9yZ2VDb25maWcsIGl0ZW0pO1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGl0ZW0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JnZUNvbmZpZy5wbHVnaW5JbnRlcmZhY2UudHJpZ2dlck11dGF0aW5nSG9vayhob29rTmFtZSwgaXRlbSk7XG59XG4iXX0=