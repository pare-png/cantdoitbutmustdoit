"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _electronRebuild = _interopRequireDefault(require("electron-rebuild"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = async (buildPath, electronVersion, platform, arch, config = {}) => {
  await (0, _asyncOra.asyncOra)('Preparing native dependencies', async rebuildSpinner => {
    const rebuilder = (0, _electronRebuild.default)(_objectSpread({}, config, {
      buildPath,
      electronVersion,
      arch
    }));
    const {
      lifecycle
    } = rebuilder;
    let found = 0;
    let done = 0;

    const redraw = () => {
      rebuildSpinner.text = `Preparing native dependencies: ${done} / ${found}`;
    };

    lifecycle.on('module-found', () => {
      found += 1;
      redraw();
    });
    lifecycle.on('module-done', () => {
      done += 1;
      redraw();
    });
    await rebuilder;
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3JlYnVpbGQudHMiXSwibmFtZXMiOlsiYnVpbGRQYXRoIiwiZWxlY3Ryb25WZXJzaW9uIiwicGxhdGZvcm0iLCJhcmNoIiwiY29uZmlnIiwicmVidWlsZFNwaW5uZXIiLCJyZWJ1aWxkZXIiLCJsaWZlY3ljbGUiLCJmb3VuZCIsImRvbmUiLCJyZWRyYXciLCJ0ZXh0Iiwib24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUdBOzs7Ozs7Ozs7O2VBR2UsT0FDYkEsU0FEYSxFQUViQyxlQUZhLEVBR2JDLFFBSGEsRUFJYkMsSUFKYSxFQUtiQyxNQUErQixHQUFHLEVBTHJCLEtBTVY7QUFDSCxRQUFNLHdCQUFTLCtCQUFULEVBQTBDLE1BQU9DLGNBQVAsSUFBMEI7QUFDeEUsVUFBTUMsU0FBUyxHQUFHLGdEQUNiRixNQURhO0FBRWhCSixNQUFBQSxTQUZnQjtBQUdoQkMsTUFBQUEsZUFIZ0I7QUFJaEJFLE1BQUFBO0FBSmdCLE9BQWxCO0FBTUEsVUFBTTtBQUFFSSxNQUFBQTtBQUFGLFFBQWdCRCxTQUF0QjtBQUVBLFFBQUlFLEtBQUssR0FBRyxDQUFaO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLENBQVg7O0FBRUEsVUFBTUMsTUFBTSxHQUFHLE1BQU07QUFDbkJMLE1BQUFBLGNBQWMsQ0FBQ00sSUFBZixHQUF1QixrQ0FBaUNGLElBQUssTUFBS0QsS0FBTSxFQUF4RTtBQUNELEtBRkQ7O0FBSUFELElBQUFBLFNBQVMsQ0FBQ0ssRUFBVixDQUFhLGNBQWIsRUFBNkIsTUFBTTtBQUFFSixNQUFBQSxLQUFLLElBQUksQ0FBVDtBQUFZRSxNQUFBQSxNQUFNO0FBQUssS0FBNUQ7QUFDQUgsSUFBQUEsU0FBUyxDQUFDSyxFQUFWLENBQWEsYUFBYixFQUE0QixNQUFNO0FBQUVILE1BQUFBLElBQUksSUFBSSxDQUFSO0FBQVdDLE1BQUFBLE1BQU07QUFBSyxLQUExRDtBQUVBLFVBQU1KLFNBQU47QUFDRCxHQXBCSyxDQUFOO0FBcUJELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSwgRm9yZ2VBcmNoIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5cbmltcG9ydCByZWJ1aWxkIGZyb20gJ2VsZWN0cm9uLXJlYnVpbGQnO1xuaW1wb3J0IHsgUmVidWlsZE9wdGlvbnMgfSBmcm9tICdlbGVjdHJvbi1yZWJ1aWxkL2xpYi9zcmMvcmVidWlsZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChcbiAgYnVpbGRQYXRoOiBzdHJpbmcsXG4gIGVsZWN0cm9uVmVyc2lvbjogc3RyaW5nLFxuICBwbGF0Zm9ybTogRm9yZ2VQbGF0Zm9ybSxcbiAgYXJjaDogRm9yZ2VBcmNoLFxuICBjb25maWc6IFBhcnRpYWw8UmVidWlsZE9wdGlvbnM+ID0ge30sXG4pID0+IHtcbiAgYXdhaXQgYXN5bmNPcmEoJ1ByZXBhcmluZyBuYXRpdmUgZGVwZW5kZW5jaWVzJywgYXN5bmMgKHJlYnVpbGRTcGlubmVyKSA9PiB7XG4gICAgY29uc3QgcmVidWlsZGVyID0gcmVidWlsZCh7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBidWlsZFBhdGgsXG4gICAgICBlbGVjdHJvblZlcnNpb24sXG4gICAgICBhcmNoLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgbGlmZWN5Y2xlIH0gPSByZWJ1aWxkZXI7XG5cbiAgICBsZXQgZm91bmQgPSAwO1xuICAgIGxldCBkb25lID0gMDtcblxuICAgIGNvbnN0IHJlZHJhdyA9ICgpID0+IHtcbiAgICAgIHJlYnVpbGRTcGlubmVyLnRleHQgPSBgUHJlcGFyaW5nIG5hdGl2ZSBkZXBlbmRlbmNpZXM6ICR7ZG9uZX0gLyAke2ZvdW5kfWA7XG4gICAgfTtcblxuICAgIGxpZmVjeWNsZS5vbignbW9kdWxlLWZvdW5kJywgKCkgPT4geyBmb3VuZCArPSAxOyByZWRyYXcoKTsgfSk7XG4gICAgbGlmZWN5Y2xlLm9uKCdtb2R1bGUtZG9uZScsICgpID0+IHsgZG9uZSArPSAxOyByZWRyYXcoKTsgfSk7XG5cbiAgICBhd2FpdCByZWJ1aWxkZXI7XG4gIH0pO1xufTtcbiJdfQ==