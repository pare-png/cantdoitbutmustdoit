"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _crypto = _interopRequireDefault(require("crypto"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const EXTENSION = '.forge.publish';

class PublishState {
  static async loadFromDirectory(directory, rootDir) {
    if (!(await _fsExtra.default.pathExists(directory))) {
      throw new Error(`Attempted to load publish state from a missing directory: ${directory}`);
    }

    const publishes = [];

    for (const dirName of await _fsExtra.default.readdir(directory)) {
      const subDir = _path.default.resolve(directory, dirName);

      const states = [];

      if ((await _fsExtra.default.stat(subDir)).isDirectory()) {
        const filePaths = (await _fsExtra.default.readdir(subDir)).filter(fileName => fileName.endsWith(EXTENSION)).map(fileName => _path.default.resolve(subDir, fileName));

        for (const filePath of filePaths) {
          const state = new PublishState(filePath);
          await state.load(); // eslint-disable-next-line max-len

          state.state.artifacts = state.state.artifacts.map(artifactPath => _path.default.resolve(rootDir, artifactPath));
          states.push(state);
        }
      }

      publishes.push(states);
    }

    return publishes;
  }

  static async saveToDirectory(directory, artifacts, rootDir) {
    const id = _crypto.default.createHash('SHA256').update(JSON.stringify(artifacts)).digest('hex');

    for (const artifact of artifacts) {
      // eslint-disable-next-line max-len
      artifact.artifacts = artifact.artifacts.map(artifactPath => _path.default.relative(rootDir, artifactPath));
      const publishState = new PublishState(_path.default.resolve(directory, id, 'null'), false);
      publishState.state = artifact;
      await publishState.saveToDisk();
    }
  }

  constructor(filePath, hasHash = true) {
    _defineProperty(this, "dir", void 0);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "hasHash", void 0);

    _defineProperty(this, "state", {});

    this.dir = _path.default.dirname(filePath);
    this.path = filePath;
    this.hasHash = hasHash;
  }

  generateHash() {
    const content = JSON.stringify(this.state || {});
    return _crypto.default.createHash('SHA256').update(content).digest('hex');
  }

  async load() {
    this.state = await _fsExtra.default.readJson(this.path);
  }

  async saveToDisk() {
    if (!this.hasHash) {
      this.path = _path.default.resolve(this.dir, `${this.generateHash()}${EXTENSION}`);
      this.hasHash = true;
    }

    await _fsExtra.default.mkdirs(_path.default.dirname(this.path));
    await _fsExtra.default.writeJson(this.path, this.state);
  }

}

exports.default = PublishState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3B1Ymxpc2gtc3RhdGUudHMiXSwibmFtZXMiOlsiRVhURU5TSU9OIiwiUHVibGlzaFN0YXRlIiwibG9hZEZyb21EaXJlY3RvcnkiLCJkaXJlY3RvcnkiLCJyb290RGlyIiwiZnMiLCJwYXRoRXhpc3RzIiwiRXJyb3IiLCJwdWJsaXNoZXMiLCJkaXJOYW1lIiwicmVhZGRpciIsInN1YkRpciIsInBhdGgiLCJyZXNvbHZlIiwic3RhdGVzIiwic3RhdCIsImlzRGlyZWN0b3J5IiwiZmlsZVBhdGhzIiwiZmlsdGVyIiwiZmlsZU5hbWUiLCJlbmRzV2l0aCIsIm1hcCIsImZpbGVQYXRoIiwic3RhdGUiLCJsb2FkIiwiYXJ0aWZhY3RzIiwiYXJ0aWZhY3RQYXRoIiwicHVzaCIsInNhdmVUb0RpcmVjdG9yeSIsImlkIiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkaWdlc3QiLCJhcnRpZmFjdCIsInJlbGF0aXZlIiwicHVibGlzaFN0YXRlIiwic2F2ZVRvRGlzayIsImNvbnN0cnVjdG9yIiwiaGFzSGFzaCIsImRpciIsImRpcm5hbWUiLCJnZW5lcmF0ZUhhc2giLCJjb250ZW50IiwicmVhZEpzb24iLCJta2RpcnMiLCJ3cml0ZUpzb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxTQUFTLEdBQUcsZ0JBQWxCOztBQUVlLE1BQU1DLFlBQU4sQ0FBbUI7QUFDaEMsZUFBYUMsaUJBQWIsQ0FBK0JDLFNBQS9CLEVBQWtEQyxPQUFsRCxFQUFtRTtBQUNqRSxRQUFJLEVBQUMsTUFBTUMsaUJBQUdDLFVBQUgsQ0FBY0gsU0FBZCxDQUFQLENBQUosRUFBcUM7QUFDbkMsWUFBTSxJQUFJSSxLQUFKLENBQVcsNkRBQTRESixTQUFVLEVBQWpGLENBQU47QUFDRDs7QUFFRCxVQUFNSyxTQUEyQixHQUFHLEVBQXBDOztBQUNBLFNBQUssTUFBTUMsT0FB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LFFBQU1YLElBQU4sR0FBYTtBQUNYLFNBQUtELEtBQUwsR0FBYSxNQUFNbEIsaUJBQUd5QyxRQUFILENBQVksS0FBS2xDLElBQWpCLENBQW5CO0FBQ0Q7O0FBRUQsUUFBTTJCLFVBQU4sR0FBbUI7QUFDakIsUUFBSSxDQUFDLEtBQUtFLE9BQVYsRUFBbUI7QUFDakIsV0FBSzdCLElBQUwsR0FBWUEsY0FBS0MsT0FBTCxDQUFhLEtBQUs2QixHQUFsQixFQUF3QixHQUFFLEtBQUtFLFlBQUwsRUFBb0IsR0FBRTVDLFNBQVUsRUFBMUQsQ0FBWjtBQUNBLFdBQUt5QyxPQUFMLEdBQWUsSUFBZjtBQUNEOztBQUVELFVBQU1wQyxpQkFBRzBDLE1BQUgsQ0FBVW5DLGNBQUsrQixPQUFMLENBQWEsS0FBSy9CLElBQWxCLENBQVYsQ0FBTjtBQUNBLFVBQU1QLGlCQUFHMkMsU0FBSCxDQUFhLEtBQUtwQyxJQUFsQixFQUF3QixLQUFLVyxLQUE3QixDQUFOO0FBQ0Q7O0FBdkUrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcmdlTWFrZVJlc3VsdCB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBFWFRFTlNJT04gPSAnLmZvcmdlLnB1Ymxpc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQdWJsaXNoU3RhdGUge1xuICBzdGF0aWMgYXN5bmMgbG9hZEZyb21EaXJlY3RvcnkoZGlyZWN0b3J5OiBzdHJpbmcsIHJvb3REaXI6IHN0cmluZykge1xuICAgIGlmICghYXdhaXQgZnMucGF0aEV4aXN0cyhkaXJlY3RvcnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRlZCB0byBsb2FkIHB1Ymxpc2ggc3RhdGUgZnJvbSBhIG1pc3NpbmcgZGlyZWN0b3J5OiAke2RpcmVjdG9yeX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwdWJsaXNoZXM6IFB1Ymxpc2hTdGF0ZVtdW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGRpck5hbWUgb2YgYXdhaXQgZnMucmVhZGRpcihkaXJlY3RvcnkpKSB7XG4gICAgICBjb25zdCBzdWJEaXIgPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBkaXJOYW1lKTtcbiAgICAgIGNvbnN0IHN0YXRlczogUHVibGlzaFN0YXRlW10gPSBbXTtcblxuICAgICAgaWYgKChhd2FpdCBmcy5zdGF0KHN1YkRpcikpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgY29uc3QgZmlsZVBhdGhzID0gKGF3YWl0IGZzLnJlYWRkaXIoc3ViRGlyKSlcbiAgICAgICAgICAuZmlsdGVyKChmaWxlTmFtZSkgPT4gZmlsZU5hbWUuZW5kc1dpdGgoRVhURU5TSU9OKSlcbiAgICAgICAgICAubWFwKChmaWxlTmFtZSkgPT4gcGF0aC5yZXNvbHZlKHN1YkRpciwgZmlsZU5hbWUpKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGZpbGVQYXRoIG9mIGZpbGVQYXRocykge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gbmV3IFB1Ymxpc2hTdGF0ZShmaWxlUGF0aCk7XG4gICAgICAgICAgYXdhaXQgc3RhdGUubG9hZCgpO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICAgICAgc3RhdGUuc3RhdGUuYXJ0aWZhY3RzID0gc3RhdGUuc3RhdGUuYXJ0aWZhY3RzLm1hcCgoYXJ0aWZhY3RQYXRoKSA9PiBwYXRoLnJlc29sdmUocm9vdERpciwgYXJ0aWZhY3RQYXRoKSk7XG4gICAgICAgICAgc3RhdGVzLnB1c2goc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdWJsaXNoZXMucHVzaChzdGF0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcHVibGlzaGVzO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNhdmVUb0RpcmVjdG9yeShkaXJlY3Rvcnk6IHN0cmluZywgYXJ0aWZhY3RzOiBGb3JnZU1ha2VSZXN1bHRbXSwgcm9vdERpcjogc3RyaW5nKSB7XG4gICAgY29uc3QgaWQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnU0hBMjU2JykudXBkYXRlKEpTT04uc3RyaW5naWZ5KGFydGlmYWN0cykpLmRpZ2VzdCgnaGV4Jyk7XG4gICAgZm9yIChjb25zdCBhcnRpZmFjdCBvZiBhcnRpZmFjdHMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICBhcnRpZmFjdC5hcnRpZmFjdHMgPSBhcnRpZmFjdC5hcnRpZmFjdHMubWFwKChhcnRpZmFjdFBhdGgpID0+IHBhdGgucmVsYXRpdmUocm9vdERpciwgYXJ0aWZhY3RQYXRoKSk7XG4gICAgICBjb25zdCBwdWJsaXNoU3RhdGUgPSBuZXcgUHVibGlzaFN0YXRlKHBhdGgucmVzb2x2ZShkaXJlY3RvcnksIGlkLCAnbnVsbCcpLCBmYWxzZSk7XG4gICAgICBwdWJsaXNoU3RhdGUuc3RhdGUgPSBhcnRpZmFjdDtcbiAgICAgIGF3YWl0IHB1Ymxpc2hTdGF0ZS5zYXZlVG9EaXNrKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkaXI6IHN0cmluZztcblxuICBwcml2YXRlIHBhdGg6IHN0cmluZztcblxuICBwcml2YXRlIGhhc0hhc2g6IGJvb2xlYW47XG5cbiAgcHVibGljIHN0YXRlOiBGb3JnZU1ha2VSZXN1bHQgPSB7fSBhcyBGb3JnZU1ha2VSZXN1bHQ7XG5cbiAgY29uc3RydWN0b3IoZmlsZVBhdGg6IHN0cmluZywgaGFzSGFzaCA9IHRydWUpIHtcbiAgICB0aGlzLmRpciA9IHBhdGguZGlybmFtZShmaWxlUGF0aCk7XG4gICAgdGhpcy5wYXRoID0gZmlsZVBhdGg7XG4gICAgdGhpcy5oYXNIYXNoID0gaGFzSGFzaDtcbiAgfVxuXG4gIGdlbmVyYXRlSGFzaCgpIHtcbiAgICBjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSB8fCB7fSk7XG4gICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdTSEEyNTYnKS51cGRhdGUoY29udGVudCkuZGlnZXN0KCdoZXgnKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IGF3YWl0IGZzLnJlYWRKc29uKHRoaXMucGF0aCk7XG4gIH1cblxuICBhc3luYyBzYXZlVG9EaXNrKCkge1xuICAgIGlmICghdGhpcy5oYXNIYXNoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5kaXIsIGAke3RoaXMuZ2VuZXJhdGVIYXNoKCl9JHtFWFRFTlNJT059YCk7XG4gICAgICB0aGlzLmhhc0hhc2ggPSB0cnVlO1xuICAgIH1cblxuICAgIGF3YWl0IGZzLm1rZGlycyhwYXRoLmRpcm5hbWUodGhpcy5wYXRoKSk7XG4gICAgYXdhaXQgZnMud3JpdGVKc29uKHRoaXMucGF0aCwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cbiJdfQ==