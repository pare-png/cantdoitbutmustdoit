"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.copy = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init:starter-files');

const copy = async (source, target) => {
  d(`copying "${source}" --> "${target}"`);
  await _fsExtra.default.copy(source, target);
};

exports.copy = copy;

var _default = async (dir, {
  copyCIFiles
}) => {
  await (0, _asyncOra.asyncOra)('Copying Starter Files', async () => {
    const tmplPath = _path.default.resolve(__dirname, '../../../tmpl');

    d('creating directory:', _path.default.resolve(dir, 'src'));
    await _fsExtra.default.mkdirs(_path.default.resolve(dir, 'src'));
    const rootFiles = ['_gitignore'];
    if (copyCIFiles) rootFiles.push(...['_travis.yml', '_appveyor.yml']);
    const srcFiles = ['index.css', 'index.js', 'index.html'];

    for (const file of rootFiles) {
      await copy(_path.default.resolve(tmplPath, file), _path.default.resolve(dir, file.replace(/^_/, '.')));
    }

    for (const file of srcFiles) {
      await copy(_path.default.resolve(tmplPath, file), _path.default.resolve(dir, 'src', file));
    }
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtc3RhcnRlci1maWxlcy50cyJdLCJuYW1lcyI6WyJkIiwiY29weSIsInNvdXJjZSIsInRhcmdldCIsImZzIiwiZGlyIiwiY29weUNJRmlsZXMiLCJ0bXBsUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwibWtkaXJzIiwicm9vdEZpbGVzIiwicHVzaCIsInNyY0ZpbGVzIiwiZmlsZSIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsQ0FBQyxHQUFHLG9CQUFNLG1DQUFOLENBQVY7O0FBRU8sTUFBTUMsSUFBSSxHQUFHLE9BQU9DLE1BQVAsRUFBdUJDLE1BQXZCLEtBQTBDO0FBQzVESCxFQUFBQSxDQUFDLENBQUUsWUFBV0UsTUFBTyxVQUFTQyxNQUFPLEdBQXBDLENBQUQ7QUFDQSxRQUFNQyxpQkFBR0gsSUFBSCxDQUFRQyxNQUFSLEVBQWdCQyxNQUFoQixDQUFOO0FBQ0QsQ0FITTs7OztlQVNRLE9BQU9FLEdBQVAsRUFBb0I7QUFBRUMsRUFBQUE7QUFBRixDQUFwQixLQUFpRTtBQUM5RSxRQUFNLHdCQUFTLHVCQUFULEVBQWtDLFlBQVk7QUFDbEQsVUFBTUMsUUFBUSxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsZUFBeEIsQ0FBakI7O0FBRUFWLElBQUFBLENBQUMsQ0FBQyxxQkFBRCxFQUF3QlEsY0FBS0MsT0FBTCxDQUFhSixHQUFiLEVBQWtCLEtBQWxCLENBQXhCLENBQUQ7QUFDQSxVQUFNRCxpQkFBR08sTUFBSCxDQUFVSCxjQUFLQyxPQUFMLENBQWFKLEdBQWIsRUFBa0IsS0FBbEIsQ0FBVixDQUFOO0FBQ0EsVUFBTU8sU0FBUyxHQUFHLENBQUMsWUFBRCxDQUFsQjtBQUNBLFFBQUlOLFdBQUosRUFBaUJNLFNBQVMsQ0FBQ0MsSUFBVixDQUFlLEdBQUcsQ0FBQyxhQUFELEVBQWdCLGVBQWhCLENBQWxCO0FBQ2pCLFVBQU1DLFFBQVEsR0FBRyxDQUFDLFdBQUQsRUFBYyxVQUFkLEVBQTBCLFlBQTFCLENBQWpCOztBQUVBLFNBQUssTUFBTUMsSUFBWCxJQUFtQkgsU0FBbkIsRUFBOEI7QUFDNUIsWUFBTVgsSUFBSSxDQUFDTyxjQUFLQyxPQUFMLENBQWFGLFFBQWIsRUFBdUJRLElBQXZCLENBQUQsRUFBK0JQLGNBQUtDLE9BQUwsQ0FBYUosR0FBYixFQUFrQlUsSUFBSSxDQUFDQyxPQUFMLENBQWEsSUFBYixFQUFtQixHQUFuQixDQUFsQixDQUEvQixDQUFWO0FBQ0Q7O0FBQ0QsU0FBSyxNQUFNRCxJQUFYLElBQW1CRCxRQUFuQixFQUE2QjtBQUMzQixZQUFNYixJQUFJLENBQUNPLGNBQUtDLE9BQUwsQ0FBYUYsUUFBYixFQUF1QlEsSUFBdkIsQ0FBRCxFQUErQlAsY0FBS0MsT0FBTCxDQUFhSixHQUFiLEVBQWtCLEtBQWxCLEVBQXlCVSxJQUF6QixDQUEvQixDQUFWO0FBQ0Q7QUFDRixHQWZLLENBQU47QUFnQkQsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmluaXQ6c3RhcnRlci1maWxlcycpO1xuXG5leHBvcnQgY29uc3QgY29weSA9IGFzeW5jIChzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcpID0+IHtcbiAgZChgY29weWluZyBcIiR7c291cmNlfVwiIC0tPiBcIiR7dGFyZ2V0fVwiYCk7XG4gIGF3YWl0IGZzLmNvcHkoc291cmNlLCB0YXJnZXQpO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBJbml0U3RhcnRlckZpbGVzT3B0aW9ucyB7XG4gIGNvcHlDSUZpbGVzOiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcsIHsgY29weUNJRmlsZXMgfTogSW5pdFN0YXJ0ZXJGaWxlc09wdGlvbnMpID0+IHtcbiAgYXdhaXQgYXN5bmNPcmEoJ0NvcHlpbmcgU3RhcnRlciBGaWxlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0bXBsUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi90bXBsJyk7XG5cbiAgICBkKCdjcmVhdGluZyBkaXJlY3Rvcnk6JywgcGF0aC5yZXNvbHZlKGRpciwgJ3NyYycpKTtcbiAgICBhd2FpdCBmcy5ta2RpcnMocGF0aC5yZXNvbHZlKGRpciwgJ3NyYycpKTtcbiAgICBjb25zdCByb290RmlsZXMgPSBbJ19naXRpZ25vcmUnXTtcbiAgICBpZiAoY29weUNJRmlsZXMpIHJvb3RGaWxlcy5wdXNoKC4uLlsnX3RyYXZpcy55bWwnLCAnX2FwcHZleW9yLnltbCddKTtcbiAgICBjb25zdCBzcmNGaWxlcyA9IFsnaW5kZXguY3NzJywgJ2luZGV4LmpzJywgJ2luZGV4Lmh0bWwnXTtcblxuICAgIGZvciAoY29uc3QgZmlsZSBvZiByb290RmlsZXMpIHtcbiAgICAgIGF3YWl0IGNvcHkocGF0aC5yZXNvbHZlKHRtcGxQYXRoLCBmaWxlKSwgcGF0aC5yZXNvbHZlKGRpciwgZmlsZS5yZXBsYWNlKC9eXy8sICcuJykpKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHNyY0ZpbGVzKSB7XG4gICAgICBhd2FpdCBjb3B5KHBhdGgucmVzb2x2ZSh0bXBsUGF0aCwgZmlsZSksIHBhdGgucmVzb2x2ZShkaXIsICdzcmMnLCBmaWxlKSk7XG4gICAgfVxuICB9KTtcbn07XG4iXX0=