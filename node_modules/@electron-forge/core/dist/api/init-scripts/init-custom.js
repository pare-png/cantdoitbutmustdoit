"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _resolvePackage = _interopRequireDefault(require("resolve-package"));

var _installDependencies = _interopRequireWildcard(require("../../util/install-dependencies"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init:custom');

var _default = async (dir, template) => {
  let templateModulePath;
  await (0, _asyncOra.asyncOra)(`Locating custom template: "${template}"`, async () => {
    try {
      templateModulePath = await (0, _resolvePackage.default)(`electron-forge-template-${template}`);
      d('using global template');
    } catch (err) {
      try {
        templateModulePath = await (0, _resolvePackage.default)(`@electron-forge/template-${template}`);
        d('using global template');
      } catch (err2) {
        try {
          templateModulePath = require.resolve(`electron-forge-template-${template}`);
          d('using local template');
        } catch (err3) {
          try {
            templateModulePath = require.resolve(`@electron-forge/template-${template}`);
            d('using local template');
          } catch (err4) {
            try {
              templateModulePath = require.resolve(template);
              d('using absolute template');
            } catch (err5) {
              throw new Error(`Failed to locate custom template: "${template}"\n\nTry \`npm install -g @electron-forge-template-${template}\``);
            }
          }
        }
      }
    }
  }); // eslint-disable-next-line import/no-dynamic-require, global-require

  let templateModule = require(templateModulePath);

  templateModule = templateModule.default || templateModule;
  await (0, _asyncOra.asyncOra)('Installing Template Dependencies', async () => {
    d('installing dependencies');
    await (0, _installDependencies.default)(dir, templateModule.dependencies || []);
    d('installing devDependencies');
    await (0, _installDependencies.default)(dir, templateModule.devDependencies || [], _installDependencies.DepType.DEV);
  });

  if (typeof templateModule.initializeTemplate === 'function') {
    await Promise.resolve(templateModule.initializeTemplate(dir));
  }
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtY3VzdG9tLnRzIl0sIm5hbWVzIjpbImQiLCJkaXIiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlTW9kdWxlUGF0aCIsImVyciIsImVycjIiLCJyZXF1aXJlIiwicmVzb2x2ZSIsImVycjMiLCJlcnI0IiwiZXJyNSIsIkVycm9yIiwidGVtcGxhdGVNb2R1bGUiLCJkZWZhdWx0IiwiZGVwZW5kZW5jaWVzIiwiZGV2RGVwZW5kZW5jaWVzIiwiRGVwVHlwZSIsIkRFViIsImluaXRpYWxpemVUZW1wbGF0ZSIsIlByb21pc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBOzs7Ozs7QUFHQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0sNEJBQU4sQ0FBVjs7ZUFFZSxPQUFPQyxHQUFQLEVBQW9CQyxRQUFwQixLQUF5QztBQUN0RCxNQUFJQyxrQkFBSjtBQUNBLFFBQU0sd0JBQVUsOEJBQTZCRCxRQUFTLEdBQWhELEVBQW9ELFlBQVk7QUFDcEUsUUFBSTtBQUNGQyxNQUFBQSxrQkFBa0IsR0FBRyxNQUFNLDZCQUFnQiwyQkFBMEJELFFBQVMsRUFBbkQsQ0FBM0I7QUFDQUYsTUFBQUEsQ0FBQyxDQUFDLHVCQUFELENBQUQ7QUFDRCxLQUhELENBR0UsT0FBT0ksR0FBUCxFQUFZO0FBQ1osVUFBSTtBQUNGRCxRQUFBQSxrQkFBa0IsR0FBRyxNQUFNLDZCQUFnQiw0QkFBMkJELFFBQVMsRUFBcEQsQ0FBM0I7QUFDQUYsUUFBQUEsQ0FBQyxDQUFDLHVCQUFELENBQUQ7QUFDRCxPQUhELENBR0UsT0FBT0ssSUFBUCxFQUFhO0FBQ2IsWUFBSTtBQUNGRixVQUFBQSxrQkFBa0IsR0FBR0csT0FBTyxDQUFDQyxPQUFSLENBQWlCLDJCQUEwQkwsUUFBUyxFQUFwRCxDQUFyQjtBQUNBRixVQUFBQSxDQUFDLENBQUMsc0JBQUQsQ0FBRDtBQUNELFNBSEQsQ0FHRSxPQUFPUSxJQUFQLEVBQWE7QUFDYixjQUFJO0FBQ0ZMLFlBQUFBLGtCQUFrQixHQUFHRyxPQUFPLENBQUNDLE9BQVIsQ0FBaUIsNEJBQTJCTCxRQUFTLEVBQXJELENBQXJCO0FBQ0FGLFlBQUFBLENBQUMsQ0FBQyxzQkFBRCxDQUFEO0FBQ0QsV0FIRCxDQUdFLE9BQU9TLElBQVAsRUFBYTtBQUNiLGdCQUFJO0FBQ0ZOLGNBQUFBLGtCQUFrQixHQUFHRyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JMLFFBQWhCLENBQXJCO0FBQ0FGLGNBQUFBLENBQUMsQ0FBQyx5QkFBRCxDQUFEO0FBQ0QsYUFIRCxDQUdFLE9BQU9VLElBQVAsRUFBYTtBQUNiLG9CQUFNLElBQUlDLEtBQUosQ0FBVyxzQ0FBcUNULFFBQVMsc0RBQXFEQSxRQUFTLElBQXZILENBQU47QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUNGO0FBQ0YsR0EzQkssQ0FBTixDQUZzRCxDQStCdEQ7O0FBQ0EsTUFBSVUsY0FBNkMsR0FBR04sT0FBTyxDQUFDSCxrQkFBRCxDQUEzRDs7QUFFQVMsRUFBQUEsY0FBYyxHQUFHQSxjQUFjLENBQUNDLE9BQWYsSUFBMEJELGNBQTNDO0FBRUEsUUFBTSx3QkFBUyxrQ0FBVCxFQUE2QyxZQUFZO0FBQzdEWixJQUFBQSxDQUFDLENBQUMseUJBQUQsQ0FBRDtBQUNBLFVBQU0sa0NBQWVDLEdBQWYsRUFBb0JXLGNBQWMsQ0FBQ0UsWUFBZixJQUErQixFQUFuRCxDQUFOO0FBQ0FkLElBQUFBLENBQUMsQ0FBQyw0QkFBRCxDQUFEO0FBQ0EsVUFBTSxrQ0FBZUMsR0FBZixFQUFvQlcsY0FBYyxDQUFDRyxlQUFmLElBQWtDLEVBQXRELEVBQTBEQyw2QkFBUUMsR0FBbEUsQ0FBTjtBQUNELEdBTEssQ0FBTjs7QUFPQSxNQUFJLE9BQU9MLGNBQWMsQ0FBQ00sa0JBQXRCLEtBQTZDLFVBQWpELEVBQTZEO0FBQzNELFVBQU1DLE9BQU8sQ0FBQ1osT0FBUixDQUFnQkssY0FBYyxDQUFDTSxrQkFBZixDQUFrQ2pCLEdBQWxDLENBQWhCLENBQU47QUFDRDtBQUNGLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCByZXNvbHZlUGFja2FnZSBmcm9tICdyZXNvbHZlLXBhY2thZ2UnO1xuXG5pbXBvcnQgeyBGb3JnZVRlbXBsYXRlIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgaW5zdGFsbERlcExpc3QsIHsgRGVwVHlwZSB9IGZyb20gJy4uLy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgUG9zc2libGVNb2R1bGUgfSBmcm9tICcuLi8uLi91dGlsL3JlcXVpcmUtc2VhcmNoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OmN1c3RvbScpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcsIHRlbXBsYXRlOiBzdHJpbmcpID0+IHtcbiAgbGV0IHRlbXBsYXRlTW9kdWxlUGF0aCE6IHN0cmluZztcbiAgYXdhaXQgYXN5bmNPcmEoYExvY2F0aW5nIGN1c3RvbSB0ZW1wbGF0ZTogXCIke3RlbXBsYXRlfVwiYCwgYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSBhd2FpdCByZXNvbHZlUGFja2FnZShgZWxlY3Ryb24tZm9yZ2UtdGVtcGxhdGUtJHt0ZW1wbGF0ZX1gKTtcbiAgICAgIGQoJ3VzaW5nIGdsb2JhbCB0ZW1wbGF0ZScpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGVtcGxhdGVNb2R1bGVQYXRoID0gYXdhaXQgcmVzb2x2ZVBhY2thZ2UoYEBlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS0ke3RlbXBsYXRlfWApO1xuICAgICAgICBkKCd1c2luZyBnbG9iYWwgdGVtcGxhdGUnKTtcbiAgICAgIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUoYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YCk7XG4gICAgICAgICAgZCgndXNpbmcgbG9jYWwgdGVtcGxhdGUnKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyMykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUoYEBlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS0ke3RlbXBsYXRlfWApO1xuICAgICAgICAgICAgZCgndXNpbmcgbG9jYWwgdGVtcGxhdGUnKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnI0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUodGVtcGxhdGUpO1xuICAgICAgICAgICAgICBkKCd1c2luZyBhYnNvbHV0ZSB0ZW1wbGF0ZScpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyNSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2NhdGUgY3VzdG9tIHRlbXBsYXRlOiBcIiR7dGVtcGxhdGV9XCJcXG5cXG5UcnkgXFxgbnBtIGluc3RhbGwgLWcgQGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9XFxgYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSwgZ2xvYmFsLXJlcXVpcmVcbiAgbGV0IHRlbXBsYXRlTW9kdWxlOiBQb3NzaWJsZU1vZHVsZTxGb3JnZVRlbXBsYXRlPiA9IHJlcXVpcmUodGVtcGxhdGVNb2R1bGVQYXRoKTtcblxuICB0ZW1wbGF0ZU1vZHVsZSA9IHRlbXBsYXRlTW9kdWxlLmRlZmF1bHQgfHwgdGVtcGxhdGVNb2R1bGU7XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ0luc3RhbGxpbmcgVGVtcGxhdGUgRGVwZW5kZW5jaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGQoJ2luc3RhbGxpbmcgZGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCB0ZW1wbGF0ZU1vZHVsZS5kZXBlbmRlbmNpZXMgfHwgW10pO1xuICAgIGQoJ2luc3RhbGxpbmcgZGV2RGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCB0ZW1wbGF0ZU1vZHVsZS5kZXZEZXBlbmRlbmNpZXMgfHwgW10sIERlcFR5cGUuREVWKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZU1vZHVsZS5pbml0aWFsaXplVGVtcGxhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUodGVtcGxhdGVNb2R1bGUuaW5pdGlhbGl6ZVRlbXBsYXRlKGRpcikpO1xuICB9XG59O1xuIl19