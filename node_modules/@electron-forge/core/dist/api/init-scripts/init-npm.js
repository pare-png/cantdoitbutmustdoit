"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.siblingDep = siblingDep;
exports.default = exports.exactDevDeps = exports.devDeps = exports.deps = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _determineAuthor = _interopRequireDefault(require("../../util/determine-author"));

var _installDependencies = _interopRequireWildcard(require("../../util/install-dependencies"));

var _readPackageJson = require("../../util/read-package-json");

var _forgeConfig = require("../../util/forge-config");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug.default)('electron-forge:init:npm');

const corePackage = _fsExtra.default.readJsonSync(_path.default.resolve(__dirname, '../../../package.json'));

function siblingDep(name) {
  return `@electron-forge/${name}@${corePackage.version}`;
}

const deps = ['electron-squirrel-startup'];
exports.deps = deps;
const devDeps = [siblingDep('cli'), siblingDep('maker-squirrel'), siblingDep('maker-zip'), siblingDep('maker-deb'), siblingDep('maker-rpm')];
exports.devDeps = devDeps;
const exactDevDeps = ['electron'];
exports.exactDevDeps = exactDevDeps;

var _default = async dir => {
  await (0, _asyncOra.asyncOra)('Initializing NPM Module', async () => {
    const packageJSON = await (0, _readPackageJson.readRawPackageJson)(_path.default.resolve(__dirname, '../../../tmpl')); // eslint-disable-next-line no-multi-assign

    packageJSON.productName = packageJSON.name = _path.default.basename(dir).toLowerCase();
    packageJSON.author = await (0, _determineAuthor.default)(dir);
    (0, _forgeConfig.setInitialForgeConfig)(packageJSON);
    packageJSON.scripts.lint = 'echo "No linting configured"';
    d('writing package.json to:', dir);
    await _fsExtra.default.writeJson(_path.default.resolve(dir, 'package.json'), packageJSON, {
      spaces: 2
    });
  });
  await (0, _asyncOra.asyncOra)('Installing NPM Dependencies', async () => {
    d('installing dependencies');
    await (0, _installDependencies.default)(dir, deps);
    d('installing devDependencies');
    await (0, _installDependencies.default)(dir, devDeps, _installDependencies.DepType.DEV);
    d('installing exact devDependencies');

    for (const packageName of exactDevDeps) {
      await (0, _installDependencies.default)(dir, [packageName], _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
    }
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtbnBtLnRzIl0sIm5hbWVzIjpbImQiLCJjb3JlUGFja2FnZSIsImZzIiwicmVhZEpzb25TeW5jIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJzaWJsaW5nRGVwIiwibmFtZSIsInZlcnNpb24iLCJkZXBzIiwiZGV2RGVwcyIsImV4YWN0RGV2RGVwcyIsImRpciIsInBhY2thZ2VKU09OIiwicHJvZHVjdE5hbWUiLCJiYXNlbmFtZSIsInRvTG93ZXJDYXNlIiwiYXV0aG9yIiwic2NyaXB0cyIsImxpbnQiLCJ3cml0ZUpzb24iLCJzcGFjZXMiLCJEZXBUeXBlIiwiREVWIiwicGFja2FnZU5hbWUiLCJEZXBWZXJzaW9uUmVzdHJpY3Rpb24iLCJFWEFDVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0seUJBQU4sQ0FBVjs7QUFDQSxNQUFNQyxXQUFXLEdBQUdDLGlCQUFHQyxZQUFILENBQWdCQyxjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsdUJBQXhCLENBQWhCLENBQXBCOztBQUVPLFNBQVNDLFVBQVQsQ0FBb0JDLElBQXBCLEVBQWtDO0FBQ3ZDLFNBQVEsbUJBQWtCQSxJQUFLLElBQUdQLFdBQVcsQ0FBQ1EsT0FBUSxFQUF0RDtBQUNEOztBQUVNLE1BQU1DLElBQUksR0FBRyxDQUFDLDJCQUFELENBQWI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHLENBQ3JCSixVQUFVLENBQUMsS0FBRCxDQURXLEVBRXJCQSxVQUFVLENBQUMsZ0JBQUQsQ0FGVyxFQUdyQkEsVUFBVSxDQUFDLFdBQUQsQ0FIVyxFQUlyQkEsVUFBVSxDQUFDLFdBQUQsQ0FKVyxFQUtyQkEsVUFBVSxDQUFDLFdBQUQsQ0FMVyxDQUFoQjs7QUFPQSxNQUFNSyxZQUFZLEdBQUcsQ0FBQyxVQUFELENBQXJCOzs7ZUFFUSxNQUFPQyxHQUFQLElBQXVCO0FBQ3BDLFFBQU0sd0JBQVMseUJBQVQsRUFBb0MsWUFBWTtBQUNwRCxVQUFNQyxXQUFXLEdBQUcsTUFBTSx5Q0FBbUJWLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixlQUF4QixDQUFuQixDQUExQixDQURvRCxDQUVwRDs7QUFDQVEsSUFBQUEsV0FBVyxDQUFDQyxXQUFaLEdBQTBCRCxXQUFXLENBQUNOLElBQVosR0FBbUJKLGNBQUtZLFFBQUwsQ0FBY0gsR0FBZCxFQUFtQkksV0FBbkIsRUFBN0M7QUFDQUgsSUFBQUEsV0FBVyxDQUFDSSxNQUFaLEdBQXFCLE1BQU0sOEJBQWdCTCxHQUFoQixDQUEzQjtBQUNBLDRDQUFzQkMsV0FBdEI7QUFFQUEsSUFBQUEsV0FBVyxDQUFDSyxPQUFaLENBQW9CQyxJQUFwQixHQUEyQiw4QkFBM0I7QUFFQXBCLElBQUFBLENBQUMsQ0FBQywwQkFBRCxFQUE2QmEsR0FBN0IsQ0FBRDtBQUNBLFVBQU1YLGlCQUFHbUIsU0FBSCxDQUFhakIsY0FBS0MsT0FBTCxDQUFhUSxHQUFiLEVBQWtCLGNBQWxCLENBQWIsRUFBZ0RDLFdBQWhELEVBQTZEO0FBQUVRLE1BQUFBLE1BQU0sRUFBRTtBQUFWLEtBQTdELENBQU47QUFDRCxHQVhLLENBQU47QUFhQSxRQUFNLHdCQUFTLDZCQUFULEVBQXdDLFlBQVk7QUFDeER0QixJQUFBQSxDQUFDLENBQUMseUJBQUQsQ0FBRDtBQUNBLFVBQU0sa0NBQWVhLEdBQWYsRUFBb0JILElBQXBCLENBQU47QUFFQVYsSUFBQUEsQ0FBQyxDQUFDLDRCQUFELENBQUQ7QUFDQSxVQUFNLGtDQUFlYSxHQUFmLEVBQW9CRixPQUFwQixFQUE2QlksNkJBQVFDLEdBQXJDLENBQU47QUFFQXhCLElBQUFBLENBQUMsQ0FBQyxrQ0FBRCxDQUFEOztBQUNBLFNBQUssTUFBTXlCLFdBQVgsSUFBMEJiLFlBQTFCLEVBQXdDO0FBQ3RDLFlBQU0sa0NBQWVDLEdBQWYsRUFBb0IsQ0FBQ1ksV0FBRCxDQUFwQixFQUFtQ0YsNkJBQVFDLEdBQTNDLEVBQWdERSwyQ0FBc0JDLEtBQXRFLENBQU47QUFDRDtBQUNGLEdBWEssQ0FBTjtBQVlELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IGRldGVybWluZUF1dGhvciBmcm9tICcuLi8uLi91dGlsL2RldGVybWluZS1hdXRob3InO1xuaW1wb3J0IGluc3RhbGxEZXBMaXN0LCB7IERlcFR5cGUsIERlcFZlcnNpb25SZXN0cmljdGlvbiB9IGZyb20gJy4uLy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcmVhZFJhd1BhY2thZ2VKc29uIH0gZnJvbSAnLi4vLi4vdXRpbC9yZWFkLXBhY2thZ2UtanNvbic7XG5pbXBvcnQgeyBzZXRJbml0aWFsRm9yZ2VDb25maWcgfSBmcm9tICcuLi8uLi91dGlsL2ZvcmdlLWNvbmZpZyc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpucG0nKTtcbmNvbnN0IGNvcmVQYWNrYWdlID0gZnMucmVhZEpzb25TeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi9wYWNrYWdlLmpzb24nKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWJsaW5nRGVwKG5hbWU6IHN0cmluZykge1xuICByZXR1cm4gYEBlbGVjdHJvbi1mb3JnZS8ke25hbWV9QCR7Y29yZVBhY2thZ2UudmVyc2lvbn1gO1xufVxuXG5leHBvcnQgY29uc3QgZGVwcyA9IFsnZWxlY3Ryb24tc3F1aXJyZWwtc3RhcnR1cCddO1xuZXhwb3J0IGNvbnN0IGRldkRlcHMgPSBbXG4gIHNpYmxpbmdEZXAoJ2NsaScpLFxuICBzaWJsaW5nRGVwKCdtYWtlci1zcXVpcnJlbCcpLFxuICBzaWJsaW5nRGVwKCdtYWtlci16aXAnKSxcbiAgc2libGluZ0RlcCgnbWFrZXItZGViJyksXG4gIHNpYmxpbmdEZXAoJ21ha2VyLXJwbScpLFxuXTtcbmV4cG9ydCBjb25zdCBleGFjdERldkRlcHMgPSBbJ2VsZWN0cm9uJ107XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChkaXI6IHN0cmluZykgPT4ge1xuICBhd2FpdCBhc3luY09yYSgnSW5pdGlhbGl6aW5nIE5QTSBNb2R1bGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL3RtcGwnKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW11bHRpLWFzc2lnblxuICAgIHBhY2thZ2VKU09OLnByb2R1Y3ROYW1lID0gcGFja2FnZUpTT04ubmFtZSA9IHBhdGguYmFzZW5hbWUoZGlyKS50b0xvd2VyQ2FzZSgpO1xuICAgIHBhY2thZ2VKU09OLmF1dGhvciA9IGF3YWl0IGRldGVybWluZUF1dGhvcihkaXIpO1xuICAgIHNldEluaXRpYWxGb3JnZUNvbmZpZyhwYWNrYWdlSlNPTik7XG5cbiAgICBwYWNrYWdlSlNPTi5zY3JpcHRzLmxpbnQgPSAnZWNobyBcIk5vIGxpbnRpbmcgY29uZmlndXJlZFwiJztcblxuICAgIGQoJ3dyaXRpbmcgcGFja2FnZS5qc29uIHRvOicsIGRpcik7XG4gICAgYXdhaXQgZnMud3JpdGVKc29uKHBhdGgucmVzb2x2ZShkaXIsICdwYWNrYWdlLmpzb24nKSwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICB9KTtcblxuICBhd2FpdCBhc3luY09yYSgnSW5zdGFsbGluZyBOUE0gRGVwZW5kZW5jaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGQoJ2luc3RhbGxpbmcgZGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCBkZXBzKTtcblxuICAgIGQoJ2luc3RhbGxpbmcgZGV2RGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCBkZXZEZXBzLCBEZXBUeXBlLkRFVik7XG5cbiAgICBkKCdpbnN0YWxsaW5nIGV4YWN0IGRldkRlcGVuZGVuY2llcycpO1xuICAgIGZvciAoY29uc3QgcGFja2FnZU5hbWUgb2YgZXhhY3REZXZEZXBzKSB7XG4gICAgICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIFtwYWNrYWdlTmFtZV0sIERlcFR5cGUuREVWLCBEZXBWZXJzaW9uUmVzdHJpY3Rpb24uRVhBQ1QpO1xuICAgIH1cbiAgfSk7XG59O1xuIl19