"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ForgeMakeResult", {
  enumerable: true,
  get: function () {
    return _sharedTypes.ForgeMakeResult;
  }
});
Object.defineProperty(exports, "ImportOptions", {
  enumerable: true,
  get: function () {
    return _import2.ImportOptions;
  }
});
Object.defineProperty(exports, "InitOptions", {
  enumerable: true,
  get: function () {
    return _init.InitOptions;
  }
});
Object.defineProperty(exports, "InstallOptions", {
  enumerable: true,
  get: function () {
    return _install.InstallOptions;
  }
});
Object.defineProperty(exports, "InstallAsset", {
  enumerable: true,
  get: function () {
    return _install.Asset;
  }
});
Object.defineProperty(exports, "LintOptions", {
  enumerable: true,
  get: function () {
    return _lint.LintOptions;
  }
});
Object.defineProperty(exports, "MakeOptions", {
  enumerable: true,
  get: function () {
    return _make.MakeOptions;
  }
});
Object.defineProperty(exports, "PackageOptions", {
  enumerable: true,
  get: function () {
    return _package2.PackageOptions;
  }
});
Object.defineProperty(exports, "PublishOptions", {
  enumerable: true,
  get: function () {
    return _publish.PublishOptions;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function () {
    return _start.StartOptions;
  }
});
exports.utils = exports.api = exports.ForgeAPI = void 0;

require("source-map-support/register");

require("colors");

var _sharedTypes = require("@electron-forge/shared-types");

var _import2 = _interopRequireWildcard(require("./import"));

var _init = _interopRequireWildcard(require("./init"));

var _install = _interopRequireWildcard(require("./install"));

var _lint = _interopRequireWildcard(require("./lint"));

var _make = _interopRequireWildcard(require("./make"));

var _package2 = _interopRequireWildcard(require("./package"));

var _publish = _interopRequireWildcard(require("./publish"));

var _start = _interopRequireWildcard(require("./start"));

var _util = _interopRequireDefault(require("../util"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class ForgeAPI {
  /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */
  import(opts) {
    return (0, _import2.default)(opts);
  }
  /**
   * Initialize a new Electron Forge template project in the given directory.
   */


  init(opts) {
    return (0, _init.default)(opts);
  }
  /**
   * Install an Electron application from GitHub.
   *
   * Works on all three platforms for all major distributable types.
   */


  install(opts) {
    return (0, _install.default)(opts);
  }
  /**
   * Lint a local Electron application.
   *
   * The promise will be rejected with the stdout+stderr of the linting process
   * if linting fails or will be resolved if it succeeds.
   */


  lint(opts) {
    return (0, _lint.default)(opts);
  }
  /**
   * Make distributables for an Electron application
   */


  make(opts) {
    return (0, _make.default)(opts);
  }
  /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */


  package(opts) {
    return (0, _package2.default)(opts);
  }
  /**
   * Publish an Electron application into the given target service
   */


  publish(opts) {
    return (0, _publish.default)(opts);
  }
  /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */


  start(opts) {
    return (0, _start.default)(opts);
  }

}

exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwibmFtZXMiOlsiRm9yZ2VBUEkiLCJpbXBvcnQiLCJvcHRzIiwiaW5pdCIsImluc3RhbGwiLCJsaW50IiwibWFrZSIsInBhY2thZ2UiLCJwdWJsaXNoIiwic3RhcnQiLCJhcGkiLCJ1dGlscyIsIkZvcmdlVXRpbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7QUFFTyxNQUFNQSxRQUFOLENBQWU7QUFDcEI7Ozs7OztBQU1BQyxFQUFBQSxNQUFNLENBQUNDLElBQUQsRUFBc0I7QUFDMUIsV0FBTyxzQkFBUUEsSUFBUixDQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHQUMsRUFBQUEsSUFBSSxDQUFDRCxJQUFELEVBQW9CO0FBQ3RCLFdBQU8sbUJBQUtBLElBQUwsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7QUFLQUUsRUFBQUEsT0FBTyxDQUFDRixJQUFELEVBQXVCO0FBQzVCLFdBQU8sc0JBQVFBLElBQVIsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7O0FBTUFHLEVBQUFBLElBQUksQ0FBQ0gsSUFBRCxFQUFvQjtBQUN0QixXQUFPLG1CQUFLQSxJQUFMLENBQVA7QUFDRDtBQUVEOzs7OztBQUdBSSxFQUFBQSxJQUFJLENBQUNKLElBQUQsRUFBb0I7QUFDdEIsV0FBTyxtQkFBS0EsSUFBTCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7QUFHQUssRUFBQUEsT0FBTyxDQUFDTCxJQUFELEVBQXVCO0FBQzVCLFdBQU8sdUJBQVNBLElBQVQsQ0FBUDtBQUNEO0FBRUQ7Ozs7O0FBR0FNLEVBQUFBLE9BQU8sQ0FBQ04sSUFBRCxFQUF1QjtBQUM1QixXQUFPLHNCQUFRQSxJQUFSLENBQVA7QUFDRDtBQUVEOzs7Ozs7O0FBS0FPLEVBQUFBLEtBQUssQ0FBQ1AsSUFBRCxFQUFxQjtBQUN4QixXQUFPLG9CQUFNQSxJQUFOLENBQVA7QUFDRDs7QUFqRW1COzs7QUFxRXRCLE1BQU1RLEdBQUcsR0FBRyxJQUFJVixRQUFKLEVBQVo7O0FBQ0EsTUFBTVcsS0FBSyxHQUFHLElBQUlDLGFBQUosRUFBZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnY29sb3JzJztcbmltcG9ydCB7IEZvcmdlTWFrZVJlc3VsdCB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5pbXBvcnQgX2ltcG9ydCwgeyBJbXBvcnRPcHRpb25zIH0gZnJvbSAnLi9pbXBvcnQnO1xuaW1wb3J0IGluaXQsIHsgSW5pdE9wdGlvbnMgfSBmcm9tICcuL2luaXQnO1xuaW1wb3J0IGluc3RhbGwsIHsgSW5zdGFsbE9wdGlvbnMsIEFzc2V0IGFzIEluc3RhbGxBc3NldCB9IGZyb20gJy4vaW5zdGFsbCc7XG5pbXBvcnQgbGludCwgeyBMaW50T3B0aW9ucyB9IGZyb20gJy4vbGludCc7XG5pbXBvcnQgbWFrZSwgeyBNYWtlT3B0aW9ucyB9IGZyb20gJy4vbWFrZSc7XG5pbXBvcnQgX3BhY2thZ2UsIHsgUGFja2FnZU9wdGlvbnMgfSBmcm9tICcuL3BhY2thZ2UnO1xuaW1wb3J0IHB1Ymxpc2gsIHsgUHVibGlzaE9wdGlvbnMgfSBmcm9tICcuL3B1Ymxpc2gnO1xuaW1wb3J0IHN0YXJ0LCB7IFN0YXJ0T3B0aW9ucyB9IGZyb20gJy4vc3RhcnQnO1xuXG5pbXBvcnQgRm9yZ2VVdGlscyBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGNsYXNzIEZvcmdlQVBJIHtcbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gaW1wb3J0IGEgZ2l2ZW4gbW9kdWxlIGRpcmVjdG9yeSB0byB0aGUgRWxlY3Ryb24gRm9yZ2Ugc3RhbmRhcmQuXG4gICAqXG4gICAqICogU2V0cyB1cCBgZ2l0YCBhbmQgdGhlIGNvcnJlY3QgTlBNIGRlcGVuZGVuY2llc1xuICAgKiAqIEFkZHMgYSB0ZW1wbGF0ZSBmb3JnZSBjb25maWcgdG8gYHBhY2thZ2UuanNvbmBcbiAgICovXG4gIGltcG9ydChvcHRzOiBJbXBvcnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIF9pbXBvcnQob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhIG5ldyBFbGVjdHJvbiBGb3JnZSB0ZW1wbGF0ZSBwcm9qZWN0IGluIHRoZSBnaXZlbiBkaXJlY3RvcnkuXG4gICAqL1xuICBpbml0KG9wdHM6IEluaXRPcHRpb25zKSB7XG4gICAgcmV0dXJuIGluaXQob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFsbCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbiBmcm9tIEdpdEh1Yi5cbiAgICpcbiAgICogV29ya3Mgb24gYWxsIHRocmVlIHBsYXRmb3JtcyBmb3IgYWxsIG1ham9yIGRpc3RyaWJ1dGFibGUgdHlwZXMuXG4gICAqL1xuICBpbnN0YWxsKG9wdHM6IEluc3RhbGxPcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbGwob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogTGludCBhIGxvY2FsIEVsZWN0cm9uIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBUaGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHN0ZG91dCtzdGRlcnIgb2YgdGhlIGxpbnRpbmcgcHJvY2Vzc1xuICAgKiBpZiBsaW50aW5nIGZhaWxzIG9yIHdpbGwgYmUgcmVzb2x2ZWQgaWYgaXQgc3VjY2VlZHMuXG4gICAqL1xuICBsaW50KG9wdHM6IExpbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIGxpbnQob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogTWFrZSBkaXN0cmlidXRhYmxlcyBmb3IgYW4gRWxlY3Ryb24gYXBwbGljYXRpb25cbiAgICovXG4gIG1ha2Uob3B0czogTWFrZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gbWFrZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBob29rcyBpZiB0aGV5IGFyZSBhIHBhdGggdG8gYSBmaWxlIChpbnN0ZWFkIG9mIGEgYEZ1bmN0aW9uYClcbiAgICovXG4gIHBhY2thZ2Uob3B0czogUGFja2FnZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gX3BhY2thZ2Uob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGlzaCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbiBpbnRvIHRoZSBnaXZlbiB0YXJnZXQgc2VydmljZVxuICAgKi9cbiAgcHVibGlzaChvcHRzOiBQdWJsaXNoT3B0aW9ucykge1xuICAgIHJldHVybiBwdWJsaXNoKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBIYW5kbGVzIHRoaW5ncyBsaWtlIG5hdGl2ZSBtb2R1bGUgcmVidWlsZGluZyBmb3IgeW91IG9uIHRoZSBmbHlcbiAgICovXG4gIHN0YXJ0KG9wdHM6IFN0YXJ0T3B0aW9ucykge1xuICAgIHJldHVybiBzdGFydChvcHRzKTtcbiAgfVxufVxuXG5cbmNvbnN0IGFwaSA9IG5ldyBGb3JnZUFQSSgpO1xuY29uc3QgdXRpbHMgPSBuZXcgRm9yZ2VVdGlscygpO1xuXG5leHBvcnQge1xuICBGb3JnZU1ha2VSZXN1bHQsXG4gIEltcG9ydE9wdGlvbnMsXG4gIEluaXRPcHRpb25zLFxuICBJbnN0YWxsQXNzZXQsXG4gIEluc3RhbGxPcHRpb25zLFxuICBMaW50T3B0aW9ucyxcbiAgTWFrZU9wdGlvbnMsXG4gIFBhY2thZ2VPcHRpb25zLFxuICBQdWJsaXNoT3B0aW9ucyxcbiAgU3RhcnRPcHRpb25zLFxuICBhcGksXG4gIHV0aWxzLFxufTtcbiJdfQ==